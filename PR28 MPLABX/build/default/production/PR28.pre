
# 1 "PR28.c"

# 134 "C:\Program Files (x86)\Microchip\xc8\v1.00\include\pic16f727.h"
extern volatile unsigned char INDF @ 0x000;

extern volatile union {
struct {
unsigned INDF :8;
};
} INDFbits @ 0x000;


extern volatile unsigned char TMR0 @ 0x001;

extern volatile union {
struct {
unsigned TMR0 :8;
};
} TMR0bits @ 0x001;


extern volatile unsigned char PCL @ 0x002;

extern volatile union {
struct {
unsigned PCL :8;
};
} PCLbits @ 0x002;


extern volatile unsigned char STATUS @ 0x003;

extern volatile union {
struct {
unsigned C :1;
unsigned DC :1;
unsigned Z :1;
unsigned nPD :1;
unsigned nTO :1;
unsigned RP :2;
unsigned IRP :1;
};
struct {
unsigned :5;
unsigned RP0 :1;
unsigned RP1 :1;
};
struct {
unsigned CARRY :1;
};
struct {
unsigned :2;
unsigned ZERO :1;
};
} STATUSbits @ 0x003;


extern volatile unsigned char FSR @ 0x004;

extern volatile union {
struct {
unsigned FSR :8;
};
} FSRbits @ 0x004;


extern volatile unsigned char PORTA @ 0x005;

extern volatile union {
struct {
unsigned RA0 :1;
unsigned RA1 :1;
unsigned RA2 :1;
unsigned RA3 :1;
unsigned RA4 :1;
unsigned RA5 :1;
unsigned RA6 :1;
unsigned RA7 :1;
};
struct {
unsigned RA :8;
};
} PORTAbits @ 0x005;


extern volatile unsigned char PORTB @ 0x006;

extern volatile union {
struct {
unsigned RB0 :1;
unsigned RB1 :1;
unsigned RB2 :1;
unsigned RB3 :1;
unsigned RB4 :1;
unsigned RB5 :1;
unsigned RB6 :1;
unsigned RB7 :1;
};
struct {
unsigned RB :8;
};
} PORTBbits @ 0x006;


extern volatile unsigned char PORTC @ 0x007;

extern volatile union {
struct {
unsigned RC0 :1;
unsigned RC1 :1;
unsigned RC2 :1;
unsigned RC3 :1;
unsigned RC4 :1;
unsigned RC5 :1;
unsigned RC6 :1;
unsigned RC7 :1;
};
struct {
unsigned RC :8;
};
} PORTCbits @ 0x007;


extern volatile unsigned char PORTD @ 0x008;

extern volatile union {
struct {
unsigned RD0 :1;
unsigned RD1 :1;
unsigned RD2 :1;
unsigned RD3 :1;
unsigned RD4 :1;
unsigned RD5 :1;
unsigned RD6 :1;
unsigned RD7 :1;
};
struct {
unsigned RD :8;
};
} PORTDbits @ 0x008;


extern volatile unsigned char PORTE @ 0x009;

extern volatile union {
struct {
unsigned RE0 :1;
unsigned RE1 :1;
unsigned RE2 :1;
unsigned RE3 :1;
};
struct {
unsigned RE :8;
};
} PORTEbits @ 0x009;


extern volatile unsigned char PCLATH @ 0x00A;

extern volatile union {
struct {
unsigned PCLATH :5;
};
} PCLATHbits @ 0x00A;


extern volatile unsigned char INTCON @ 0x00B;

extern volatile union {
struct {
unsigned RBIF :1;
unsigned INTF :1;
unsigned T0IF :1;
unsigned RBIE :1;
unsigned INTE :1;
unsigned T0IE :1;
unsigned PEIE :1;
unsigned GIE :1;
};
struct {
unsigned IOCIF :1;
unsigned :1;
unsigned TMR0IF :1;
unsigned IOCIE :1;
unsigned :1;
unsigned TMR0IE :1;
};
} INTCONbits @ 0x00B;


extern volatile unsigned char PIR1 @ 0x00C;

extern volatile union {
struct {
unsigned TMR1IF :1;
unsigned TMR2IF :1;
unsigned CCP1IF :1;
unsigned SSPIF :1;
unsigned TXIF :1;
unsigned RCIF :1;
unsigned ADIF :1;
unsigned TMR1GIF :1;
};
} PIR1bits @ 0x00C;


extern volatile unsigned char PIR2 @ 0x00D;

extern volatile union {
struct {
unsigned CCP2IF :1;
};
} PIR2bits @ 0x00D;


extern volatile unsigned short TMR1 @ 0x00E;

extern volatile union {
struct {
unsigned TMR1 :16;
};
} TMR1bits @ 0x00E;


extern volatile unsigned char TMR1L @ 0x00E;

extern volatile union {
struct {
unsigned TMR1L :8;
};
} TMR1Lbits @ 0x00E;


extern volatile unsigned char TMR1H @ 0x00F;

extern volatile union {
struct {
unsigned TMR1H :8;
};
} TMR1Hbits @ 0x00F;


extern volatile unsigned char T1CON @ 0x010;

extern volatile union {
struct {
unsigned TMR1ON :1;
unsigned :1;
unsigned T1SYNC :1;
unsigned T1OSCEN :1;
unsigned T1CKPS :2;
unsigned TMR1CS :2;
};
struct {
unsigned :2;
unsigned nT1SYNC :1;
unsigned :1;
unsigned T1CKPS0 :1;
unsigned T1CKPS1 :1;
unsigned TMR1CS0 :1;
unsigned TMR1CS1 :1;
};
struct {
unsigned :2;
unsigned T1INSYNC :1;
};
} T1CONbits @ 0x010;


extern volatile unsigned char TMR2 @ 0x011;

extern volatile union {
struct {
unsigned TMR2 :8;
};
} TMR2bits @ 0x011;


extern volatile unsigned char T2CON @ 0x012;

extern volatile union {
struct {
unsigned T2CKPS :2;
unsigned TMR2ON :1;
unsigned TOUTPS :4;
};
struct {
unsigned T2CKPS0 :1;
unsigned T2CKPS1 :1;
unsigned :1;
unsigned TOUTPS0 :1;
unsigned TOUTPS1 :1;
unsigned TOUTPS2 :1;
unsigned TOUTPS3 :1;
};
} T2CONbits @ 0x012;


extern volatile unsigned char SSPBUF @ 0x013;

extern volatile union {
struct {
unsigned SSPBUF :8;
};
} SSPBUFbits @ 0x013;


extern volatile unsigned char SSPCON @ 0x014;

extern volatile union {
struct {
unsigned SSPM :4;
unsigned CKP :1;
unsigned SSPEN :1;
unsigned SSPOV :1;
unsigned WCOL :1;
};
struct {
unsigned SSPM0 :1;
unsigned SSPM1 :1;
unsigned SSPM2 :1;
unsigned SSPM3 :1;
};
} SSPCONbits @ 0x014;


extern volatile unsigned short CCPR1 @ 0x015;

extern volatile union {
struct {
unsigned CCPR1 :16;
};
} CCPR1bits @ 0x015;


extern volatile unsigned char CCPR1L @ 0x015;

extern volatile union {
struct {
unsigned CCPR1L :8;
};
} CCPR1Lbits @ 0x015;


extern volatile unsigned char CCPR1H @ 0x016;

extern volatile union {
struct {
unsigned CCPR1H :8;
};
} CCPR1Hbits @ 0x016;


extern volatile unsigned char CCP1CON @ 0x017;

extern volatile union {
struct {
unsigned CCP1M :4;
unsigned DC1B :2;
};
struct {
unsigned CCP1M0 :1;
unsigned CCP1M1 :1;
unsigned CCP1M2 :1;
unsigned CCP1M3 :1;
unsigned DC1B0 :1;
unsigned DC1B1 :1;
};
struct {
unsigned :4;
unsigned CCP1Y :1;
unsigned CCP1X :1;
};
} CCP1CONbits @ 0x017;


extern volatile unsigned char RCSTA @ 0x018;

extern volatile union {
struct {
unsigned RX9D :1;
unsigned OERR :1;
unsigned FERR :1;
unsigned ADDEN :1;
unsigned CREN :1;
unsigned SREN :1;
unsigned RX9 :1;
unsigned SPEN :1;
};
struct {
unsigned RCD8 :1;
unsigned :5;
unsigned RC9 :1;
};
struct {
unsigned :6;
unsigned nRC8 :1;
};
struct {
unsigned :6;
unsigned RC8_9 :1;
};
} RCSTAbits @ 0x018;


extern volatile unsigned char TXREG @ 0x019;

extern volatile union {
struct {
unsigned TXREG :8;
};
} TXREGbits @ 0x019;


extern volatile unsigned char RCREG @ 0x01A;

extern volatile union {
struct {
unsigned RCREG :8;
};
} RCREGbits @ 0x01A;


extern volatile unsigned short CCPR2 @ 0x01B;

extern volatile union {
struct {
unsigned CCPR2 :16;
};
} CCPR2bits @ 0x01B;


extern volatile unsigned char CCPR2L @ 0x01B;

extern volatile union {
struct {
unsigned CCPR2L :8;
};
} CCPR2Lbits @ 0x01B;


extern volatile unsigned char CCPR2H @ 0x01C;

extern volatile union {
struct {
unsigned CCPR2H :8;
};
} CCPR2Hbits @ 0x01C;


extern volatile unsigned char CCP2CON @ 0x01D;

extern volatile union {
struct {
unsigned CCP2M :4;
unsigned DC2B :2;
};
struct {
unsigned CCP2M0 :1;
unsigned CCP2M1 :1;
unsigned CCP2M2 :1;
unsigned CCP2M3 :1;
unsigned DC2B0 :1;
unsigned DC2B1 :1;
};
struct {
unsigned :4;
unsigned CCP2Y :1;
unsigned CCP2X :1;
};
} CCP2CONbits @ 0x01D;


extern volatile unsigned char ADRES @ 0x01E;

extern volatile union {
struct {
unsigned ADRES :8;
};
} ADRESbits @ 0x01E;


extern volatile unsigned char ADCON0 @ 0x01F;

extern volatile union {
struct {
unsigned ADON :1;
unsigned GO_nDONE :1;
unsigned CHS :4;
};
struct {
unsigned ADON :1;
unsigned GO_nDONE :1;
unsigned CHS :4;
};
struct {
unsigned :1;
unsigned GO :1;
unsigned CHS0 :1;
unsigned CHS1 :1;
unsigned CHS2 :1;
unsigned CHS3 :1;
};
struct {
unsigned :1;
unsigned nDONE :1;
};
struct {
unsigned :1;
unsigned GO_DONE :1;
};
} ADCON0bits @ 0x01F;


extern volatile unsigned char OPTION_REG @ 0x081;

extern volatile union {
struct {
unsigned PS :3;
unsigned PSA :1;
unsigned T0SE :1;
unsigned T0CS :1;
unsigned INTEDG :1;
unsigned nRBPU :1;
};
struct {
unsigned PS0 :1;
unsigned PS1 :1;
unsigned PS2 :1;
};
} OPTION_REGbits @ 0x081;


extern volatile unsigned char TRISA @ 0x085;

extern volatile union {
struct {
unsigned TRISA0 :1;
unsigned TRISA1 :1;
unsigned TRISA2 :1;
unsigned TRISA3 :1;
unsigned TRISA4 :1;
unsigned TRISA5 :1;
unsigned TRISA6 :1;
unsigned TRISA7 :1;
};
struct {
unsigned TRISA :8;
};
} TRISAbits @ 0x085;


extern volatile unsigned char TRISB @ 0x086;

extern volatile union {
struct {
unsigned TRISB0 :1;
unsigned TRISB1 :1;
unsigned TRISB2 :1;
unsigned TRISB3 :1;
unsigned TRISB4 :1;
unsigned TRISB5 :1;
unsigned TRISB6 :1;
unsigned TRISB7 :1;
};
struct {
unsigned TRISB :8;
};
} TRISBbits @ 0x086;


extern volatile unsigned char TRISC @ 0x087;

extern volatile union {
struct {
unsigned TRISC0 :1;
unsigned TRISC1 :1;
unsigned TRISC2 :1;
unsigned TRISC3 :1;
unsigned TRISC4 :1;
unsigned TRISC5 :1;
unsigned TRISC6 :1;
unsigned TRISC7 :1;
};
struct {
unsigned TRISC :8;
};
} TRISCbits @ 0x087;


extern volatile unsigned char TRISD @ 0x088;

extern volatile union {
struct {
unsigned TRISD0 :1;
unsigned TRISD1 :1;
unsigned TRISD2 :1;
unsigned TRISD3 :1;
unsigned TRISD4 :1;
unsigned TRISD5 :1;
unsigned TRISD6 :1;
unsigned TRISD7 :1;
};
struct {
unsigned TRISD :8;
};
} TRISDbits @ 0x088;


extern volatile unsigned char TRISE @ 0x089;

extern volatile union {
struct {
unsigned TRISE0 :1;
unsigned TRISE1 :1;
unsigned TRISE2 :1;
unsigned TRISE3 :1;
};
struct {
unsigned TRISE :8;
};
} TRISEbits @ 0x089;


extern volatile unsigned char PIE1 @ 0x08C;

extern volatile union {
struct {
unsigned TMR1IE :1;
unsigned TMR2IE :1;
unsigned CCP1IE :1;
unsigned SSPIE :1;
unsigned TXIE :1;
unsigned RCIE :1;
unsigned ADIE :1;
unsigned TMR1GIE :1;
};
} PIE1bits @ 0x08C;


extern volatile unsigned char PIE2 @ 0x08D;

extern volatile union {
struct {
unsigned CCP2IE :1;
};
} PIE2bits @ 0x08D;


extern volatile unsigned char PCON @ 0x08E;

extern volatile union {
struct {
unsigned nBOR :1;
unsigned nPOR :1;
};
struct {
unsigned nBO :1;
};
} PCONbits @ 0x08E;


extern volatile unsigned char T1GCON @ 0x08F;

extern volatile union {
struct {
unsigned T1GSS :2;
unsigned T1GVAL :1;
unsigned T1GGO_nDONE :1;
unsigned T1GSPM :1;
unsigned T1GTM :1;
unsigned T1GPOL :1;
unsigned TMR1GE :1;
};
struct {
unsigned T1GSS :2;
unsigned T1GVAL :1;
unsigned T1GGO_nDONE :1;
unsigned T1G1SE :1;
unsigned T1GTM :1;
unsigned T1GPOL :1;
unsigned TMR1GE :1;
};
struct {
unsigned T1GSS0 :1;
unsigned T1GSS1 :1;
unsigned :1;
unsigned T1G_nDONE :1;
};
struct {
unsigned :3;
unsigned T1GGO_DONE :1;
};
struct {
unsigned :3;
unsigned T1GGO :1;
};
} T1GCONbits @ 0x08F;


extern volatile unsigned char OSCCON @ 0x090;

extern volatile union {
struct {
unsigned :2;
unsigned ICSS :1;
unsigned ICSL :1;
unsigned IRCF :2;
};
struct {
unsigned :4;
unsigned IRCF0 :1;
unsigned IRCF1 :1;
};
} OSCCONbits @ 0x090;


extern volatile unsigned char OSCTUNE @ 0x091;

extern volatile union {
struct {
unsigned TUN :6;
};
struct {
unsigned TUN0 :1;
unsigned TUN1 :1;
unsigned TUN2 :1;
unsigned TUN3 :1;
unsigned TUN4 :1;
unsigned TUN5 :1;
};
} OSCTUNEbits @ 0x091;


extern volatile unsigned char PR2 @ 0x092;

extern volatile union {
struct {
unsigned PR2 :8;
};
} PR2bits @ 0x092;


extern volatile unsigned char SSPADD @ 0x093;

extern volatile union {
struct {
unsigned SSPADD :8;
};
} SSPADDbits @ 0x093;


extern volatile unsigned char SSPMSK @ 0x093;

extern volatile union {
struct {
unsigned SSPMSK :8;
};
} SSPMSKbits @ 0x093;


extern volatile unsigned char SSPSTAT @ 0x094;

extern volatile union {
struct {
unsigned BF :1;
unsigned UA :1;
unsigned R_nW :1;
unsigned S :1;
unsigned P :1;
unsigned D_nA :1;
unsigned CKE :1;
unsigned SMP :1;
};
struct {
unsigned BF :1;
unsigned UA :1;
unsigned R_nW :1;
unsigned S :1;
unsigned P :1;
unsigned D_nA :1;
unsigned CKE :1;
unsigned SMP :1;
};
struct {
unsigned :2;
unsigned R :1;
unsigned :2;
unsigned D :1;
};
struct {
unsigned :2;
unsigned I2C_READ :1;
unsigned I2C_START :1;
unsigned I2C_STOP :1;
unsigned I2C_DATA :1;
};
struct {
unsigned :2;
unsigned nW :1;
unsigned :2;
unsigned nA :1;
};
struct {
unsigned :2;
unsigned nWRITE :1;
unsigned :2;
unsigned nADDRESS :1;
};
struct {
unsigned :2;
unsigned R_W :1;
unsigned :2;
unsigned D_A :1;
};
struct {
unsigned :2;
unsigned READ_WRITE :1;
unsigned :2;
unsigned DATA_ADDRESS :1;
};
} SSPSTATbits @ 0x094;


extern volatile unsigned char WPUB @ 0x095;

extern volatile unsigned char WPU @ 0x095;

extern volatile union {
struct {
unsigned WPUB :8;
};
struct {
unsigned WPUB0 :1;
unsigned WPUB1 :1;
unsigned WPUB2 :1;
unsigned WPUB3 :1;
unsigned WPUB4 :1;
unsigned WPUB5 :1;
unsigned WPUB6 :1;
unsigned WPUB7 :1;
};
struct {
unsigned WPU0 :1;
unsigned WPU1 :1;
unsigned WPU2 :1;
unsigned WPU3 :1;
unsigned WPU4 :1;
unsigned WPU5 :1;
unsigned WPU6 :1;
unsigned WPU7 :1;
};
} WPUBbits @ 0x095;

extern volatile union {
struct {
unsigned WPUB :8;
};
struct {
unsigned WPUB0 :1;
unsigned WPUB1 :1;
unsigned WPUB2 :1;
unsigned WPUB3 :1;
unsigned WPUB4 :1;
unsigned WPUB5 :1;
unsigned WPUB6 :1;
unsigned WPUB7 :1;
};
struct {
unsigned WPU0 :1;
unsigned WPU1 :1;
unsigned WPU2 :1;
unsigned WPU3 :1;
unsigned WPU4 :1;
unsigned WPU5 :1;
unsigned WPU6 :1;
unsigned WPU7 :1;
};
} WPUbits @ 0x095;


extern volatile unsigned char IOCB @ 0x096;

extern volatile unsigned char IOC @ 0x096;

extern volatile union {
struct {
unsigned IOCB :8;
};
struct {
unsigned IOCB0 :1;
unsigned IOCB1 :1;
unsigned IOCB2 :1;
unsigned IOCB3 :1;
unsigned IOCB4 :1;
unsigned IOCB5 :1;
unsigned IOCB6 :1;
unsigned IOCB7 :1;
};
struct {
unsigned IOC0 :1;
unsigned IOC1 :1;
unsigned IOC2 :1;
unsigned IOC3 :1;
unsigned IOC4 :1;
unsigned IOC5 :1;
unsigned IOC6 :1;
unsigned IOC7 :1;
};
} IOCBbits @ 0x096;

extern volatile union {
struct {
unsigned IOCB :8;
};
struct {
unsigned IOCB0 :1;
unsigned IOCB1 :1;
unsigned IOCB2 :1;
unsigned IOCB3 :1;
unsigned IOCB4 :1;
unsigned IOCB5 :1;
unsigned IOCB6 :1;
unsigned IOCB7 :1;
};
struct {
unsigned IOC0 :1;
unsigned IOC1 :1;
unsigned IOC2 :1;
unsigned IOC3 :1;
unsigned IOC4 :1;
unsigned IOC5 :1;
unsigned IOC6 :1;
unsigned IOC7 :1;
};
} IOCbits @ 0x096;


extern volatile unsigned char TXSTA @ 0x098;

extern volatile union {
struct {
unsigned TX9D :1;
unsigned TRMT :1;
unsigned BRGH :1;
unsigned :1;
unsigned SYNC :1;
unsigned TXEN :1;
unsigned TX9 :1;
unsigned CSRC :1;
};
struct {
unsigned TXD8 :1;
unsigned :5;
unsigned nTX8 :1;
};
struct {
unsigned :6;
unsigned TX8_9 :1;
};
} TXSTAbits @ 0x098;


extern volatile unsigned char SPBRG @ 0x099;

extern volatile union {
struct {
unsigned SPBRG :8;
};
} SPBRGbits @ 0x099;


extern volatile unsigned char APFCON @ 0x09C;

extern volatile union {
struct {
unsigned CCP2SEL :1;
unsigned SSSEL :1;
};
} APFCONbits @ 0x09C;


extern volatile unsigned char FVRCON @ 0x09D;

extern volatile union {
struct {
unsigned ADFVR0 :1;
unsigned ADFVR1 :1;
unsigned :4;
unsigned FVREN :1;
unsigned FVRRDY :1;
};
struct {
unsigned :7;
unsigned FVRST :1;
};
} FVRCONbits @ 0x09D;


extern volatile unsigned char ADCON1 @ 0x09F;

extern volatile union {
struct {
unsigned ADREF :2;
unsigned :2;
unsigned ADCS :3;
};
struct {
unsigned ADREF0 :1;
unsigned ADREF1 :1;
unsigned :2;
unsigned ADCS0 :1;
unsigned ADCS1 :1;
unsigned ADCS2 :1;
};
} ADCON1bits @ 0x09F;


extern volatile unsigned char CPSCON0 @ 0x108;

extern volatile union {
struct {
unsigned T0XCS :1;
unsigned CPSOUT :1;
unsigned CPSRNG :2;
unsigned :3;
unsigned CPSON :1;
};
struct {
unsigned :2;
unsigned CPSRNG0 :1;
unsigned CPSRNG1 :1;
};
} CPSCON0bits @ 0x108;


extern volatile unsigned char CPSCON1 @ 0x109;

extern volatile union {
struct {
unsigned CPSCH :4;
};
struct {
unsigned CPSCH0 :1;
unsigned CPSCH1 :1;
unsigned CPSCH2 :1;
unsigned CPSCH3 :1;
};
} CPSCON1bits @ 0x109;


extern volatile unsigned char PMDATL @ 0x10C;

extern volatile unsigned char PMDATA @ 0x10C;

extern volatile union {
struct {
unsigned PMDATL :8;
};
} PMDATLbits @ 0x10C;

extern volatile union {
struct {
unsigned PMDATL :8;
};
} PMDATAbits @ 0x10C;


extern volatile unsigned char PMADRL @ 0x10D;

extern volatile unsigned char PMADR @ 0x10D;

extern volatile union {
struct {
unsigned PMADRL :8;
};
} PMADRLbits @ 0x10D;

extern volatile union {
struct {
unsigned PMADRL :8;
};
} PMADRbits @ 0x10D;


extern volatile unsigned char PMDATH @ 0x10E;

extern volatile union {
struct {
unsigned PMDATH :6;
};
} PMDATHbits @ 0x10E;


extern volatile unsigned char PMADRH @ 0x10F;

extern volatile union {
struct {
unsigned PMADRH :5;
};
} PMADRHbits @ 0x10F;


extern volatile unsigned char ANSELA @ 0x185;

extern volatile union {
struct {
unsigned ANSA :6;
};
struct {
unsigned ANSA0 :1;
unsigned ANSA1 :1;
unsigned ANSA2 :1;
unsigned ANSA3 :1;
unsigned ANSA4 :1;
unsigned ANSA5 :1;
};
} ANSELAbits @ 0x185;


extern volatile unsigned char ANSELB @ 0x186;

extern volatile union {
struct {
unsigned ANSB :6;
};
struct {
unsigned ANSB0 :1;
unsigned ANSB1 :1;
unsigned ANSB2 :1;
unsigned ANSB3 :1;
unsigned ANSB4 :1;
unsigned ANSB5 :1;
};
} ANSELBbits @ 0x186;


extern volatile unsigned char ANSELD @ 0x188;

extern volatile union {
struct {
unsigned ANSD :8;
};
struct {
unsigned ANSD0 :1;
unsigned ANSD1 :1;
unsigned ANSD2 :1;
unsigned ANSD3 :1;
unsigned ANSD4 :1;
unsigned ANSD5 :1;
unsigned ANSD6 :1;
unsigned ANSD7 :1;
};
} ANSELDbits @ 0x188;


extern volatile unsigned char ANSELE @ 0x189;

extern volatile union {
struct {
unsigned ANSE :3;
};
struct {
unsigned ANSE0 :1;
unsigned ANSE1 :1;
unsigned ANSE2 :1;
};
} ANSELEbits @ 0x189;


extern volatile unsigned char PMCON1 @ 0x18C;

extern volatile union {
struct {
unsigned RD :1;
};
struct {
unsigned PMRD :1;
};
} PMCON1bits @ 0x18C;

# 1316
extern volatile bit ADCS0 @ (((unsigned) &ADCON1)*8) + 4;
extern volatile bit ADCS1 @ (((unsigned) &ADCON1)*8) + 5;
extern volatile bit ADCS2 @ (((unsigned) &ADCON1)*8) + 6;
extern volatile bit ADDEN @ (((unsigned) &RCSTA)*8) + 3;
extern volatile bit ADFVR0 @ (((unsigned) &FVRCON)*8) + 0;
extern volatile bit ADFVR1 @ (((unsigned) &FVRCON)*8) + 1;
extern volatile bit ADIE @ (((unsigned) &PIE1)*8) + 6;
extern volatile bit ADIF @ (((unsigned) &PIR1)*8) + 6;
extern volatile bit ADON @ (((unsigned) &ADCON0)*8) + 0;
extern volatile bit ADREF0 @ (((unsigned) &ADCON1)*8) + 0;
extern volatile bit ADREF1 @ (((unsigned) &ADCON1)*8) + 1;
extern volatile bit ANSA0 @ (((unsigned) &ANSELA)*8) + 0;
extern volatile bit ANSA1 @ (((unsigned) &ANSELA)*8) + 1;
extern volatile bit ANSA2 @ (((unsigned) &ANSELA)*8) + 2;
extern volatile bit ANSA3 @ (((unsigned) &ANSELA)*8) + 3;
extern volatile bit ANSA4 @ (((unsigned) &ANSELA)*8) + 4;
extern volatile bit ANSA5 @ (((unsigned) &ANSELA)*8) + 5;
extern volatile bit ANSB0 @ (((unsigned) &ANSELB)*8) + 0;
extern volatile bit ANSB1 @ (((unsigned) &ANSELB)*8) + 1;
extern volatile bit ANSB2 @ (((unsigned) &ANSELB)*8) + 2;
extern volatile bit ANSB3 @ (((unsigned) &ANSELB)*8) + 3;
extern volatile bit ANSB4 @ (((unsigned) &ANSELB)*8) + 4;
extern volatile bit ANSB5 @ (((unsigned) &ANSELB)*8) + 5;
extern volatile bit ANSD0 @ (((unsigned) &ANSELD)*8) + 0;
extern volatile bit ANSD1 @ (((unsigned) &ANSELD)*8) + 1;
extern volatile bit ANSD2 @ (((unsigned) &ANSELD)*8) + 2;
extern volatile bit ANSD3 @ (((unsigned) &ANSELD)*8) + 3;
extern volatile bit ANSD4 @ (((unsigned) &ANSELD)*8) + 4;
extern volatile bit ANSD5 @ (((unsigned) &ANSELD)*8) + 5;
extern volatile bit ANSD6 @ (((unsigned) &ANSELD)*8) + 6;
extern volatile bit ANSD7 @ (((unsigned) &ANSELD)*8) + 7;
extern volatile bit ANSE0 @ (((unsigned) &ANSELE)*8) + 0;
extern volatile bit ANSE1 @ (((unsigned) &ANSELE)*8) + 1;
extern volatile bit ANSE2 @ (((unsigned) &ANSELE)*8) + 2;
extern volatile bit BF @ (((unsigned) &SSPSTAT)*8) + 0;
extern volatile bit BRGH @ (((unsigned) &TXSTA)*8) + 2;
extern volatile bit CARRY @ (((unsigned) &STATUS)*8) + 0;
extern volatile bit CCP1IE @ (((unsigned) &PIE1)*8) + 2;
extern volatile bit CCP1IF @ (((unsigned) &PIR1)*8) + 2;
extern volatile bit CCP1M0 @ (((unsigned) &CCP1CON)*8) + 0;
extern volatile bit CCP1M1 @ (((unsigned) &CCP1CON)*8) + 1;
extern volatile bit CCP1M2 @ (((unsigned) &CCP1CON)*8) + 2;
extern volatile bit CCP1M3 @ (((unsigned) &CCP1CON)*8) + 3;
extern volatile bit CCP1X @ (((unsigned) &CCP1CON)*8) + 5;
extern volatile bit CCP1Y @ (((unsigned) &CCP1CON)*8) + 4;
extern volatile bit CCP2IE @ (((unsigned) &PIE2)*8) + 0;
extern volatile bit CCP2IF @ (((unsigned) &PIR2)*8) + 0;
extern volatile bit CCP2M0 @ (((unsigned) &CCP2CON)*8) + 0;
extern volatile bit CCP2M1 @ (((unsigned) &CCP2CON)*8) + 1;
extern volatile bit CCP2M2 @ (((unsigned) &CCP2CON)*8) + 2;
extern volatile bit CCP2M3 @ (((unsigned) &CCP2CON)*8) + 3;
extern volatile bit CCP2SEL @ (((unsigned) &APFCON)*8) + 0;
extern volatile bit CCP2X @ (((unsigned) &CCP2CON)*8) + 5;
extern volatile bit CCP2Y @ (((unsigned) &CCP2CON)*8) + 4;
extern volatile bit CHS0 @ (((unsigned) &ADCON0)*8) + 2;
extern volatile bit CHS1 @ (((unsigned) &ADCON0)*8) + 3;
extern volatile bit CHS2 @ (((unsigned) &ADCON0)*8) + 4;
extern volatile bit CHS3 @ (((unsigned) &ADCON0)*8) + 5;
extern volatile bit CKE @ (((unsigned) &SSPSTAT)*8) + 6;
extern volatile bit CKP @ (((unsigned) &SSPCON)*8) + 4;
extern volatile bit CPSCH0 @ (((unsigned) &CPSCON1)*8) + 0;
extern volatile bit CPSCH1 @ (((unsigned) &CPSCON1)*8) + 1;
extern volatile bit CPSCH2 @ (((unsigned) &CPSCON1)*8) + 2;
extern volatile bit CPSCH3 @ (((unsigned) &CPSCON1)*8) + 3;
extern volatile bit CPSON @ (((unsigned) &CPSCON0)*8) + 7;
extern volatile bit CPSOUT @ (((unsigned) &CPSCON0)*8) + 1;
extern volatile bit CPSRNG0 @ (((unsigned) &CPSCON0)*8) + 2;
extern volatile bit CPSRNG1 @ (((unsigned) &CPSCON0)*8) + 3;
extern volatile bit CREN @ (((unsigned) &RCSTA)*8) + 4;
extern volatile bit CSRC @ (((unsigned) &TXSTA)*8) + 7;
extern volatile bit DATA_ADDRESS @ (((unsigned) &SSPSTAT)*8) + 5;
extern volatile bit DC @ (((unsigned) &STATUS)*8) + 1;
extern volatile bit DC1B0 @ (((unsigned) &CCP1CON)*8) + 4;
extern volatile bit DC1B1 @ (((unsigned) &CCP1CON)*8) + 5;
extern volatile bit DC2B0 @ (((unsigned) &CCP2CON)*8) + 4;
extern volatile bit DC2B1 @ (((unsigned) &CCP2CON)*8) + 5;
extern volatile bit D_A @ (((unsigned) &SSPSTAT)*8) + 5;
extern volatile bit D_nA @ (((unsigned) &SSPSTAT)*8) + 5;
extern volatile bit FERR @ (((unsigned) &RCSTA)*8) + 2;
extern volatile bit FVREN @ (((unsigned) &FVRCON)*8) + 6;
extern volatile bit FVRRDY @ (((unsigned) &FVRCON)*8) + 7;
extern volatile bit FVRST @ (((unsigned) &FVRCON)*8) + 7;
extern volatile bit GIE @ (((unsigned) &INTCON)*8) + 7;
extern volatile bit GO @ (((unsigned) &ADCON0)*8) + 1;
extern volatile bit GO_DONE @ (((unsigned) &ADCON0)*8) + 1;
extern volatile bit GO_nDONE @ (((unsigned) &ADCON0)*8) + 1;
extern volatile bit I2C_DATA @ (((unsigned) &SSPSTAT)*8) + 5;
extern volatile bit I2C_READ @ (((unsigned) &SSPSTAT)*8) + 2;
extern volatile bit I2C_START @ (((unsigned) &SSPSTAT)*8) + 3;
extern volatile bit I2C_STOP @ (((unsigned) &SSPSTAT)*8) + 4;
extern volatile bit ICSL @ (((unsigned) &OSCCON)*8) + 3;
extern volatile bit ICSS @ (((unsigned) &OSCCON)*8) + 2;
extern volatile bit INTE @ (((unsigned) &INTCON)*8) + 4;
extern volatile bit INTEDG @ (((unsigned) &OPTION_REG)*8) + 6;
extern volatile bit INTF @ (((unsigned) &INTCON)*8) + 1;
extern volatile bit IOC0 @ (((unsigned) &IOCB)*8) + 0;
extern volatile bit IOC1 @ (((unsigned) &IOCB)*8) + 1;
extern volatile bit IOC2 @ (((unsigned) &IOCB)*8) + 2;
extern volatile bit IOC3 @ (((unsigned) &IOCB)*8) + 3;
extern volatile bit IOC4 @ (((unsigned) &IOCB)*8) + 4;
extern volatile bit IOC5 @ (((unsigned) &IOCB)*8) + 5;
extern volatile bit IOC6 @ (((unsigned) &IOCB)*8) + 6;
extern volatile bit IOC7 @ (((unsigned) &IOCB)*8) + 7;
extern volatile bit IOCB0 @ (((unsigned) &IOCB)*8) + 0;
extern volatile bit IOCB1 @ (((unsigned) &IOCB)*8) + 1;
extern volatile bit IOCB2 @ (((unsigned) &IOCB)*8) + 2;
extern volatile bit IOCB3 @ (((unsigned) &IOCB)*8) + 3;
extern volatile bit IOCB4 @ (((unsigned) &IOCB)*8) + 4;
extern volatile bit IOCB5 @ (((unsigned) &IOCB)*8) + 5;
extern volatile bit IOCB6 @ (((unsigned) &IOCB)*8) + 6;
extern volatile bit IOCB7 @ (((unsigned) &IOCB)*8) + 7;
extern volatile bit IOCIE @ (((unsigned) &INTCON)*8) + 3;
extern volatile bit IOCIF @ (((unsigned) &INTCON)*8) + 0;
extern volatile bit IRCF0 @ (((unsigned) &OSCCON)*8) + 4;
extern volatile bit IRCF1 @ (((unsigned) &OSCCON)*8) + 5;
extern volatile bit IRP @ (((unsigned) &STATUS)*8) + 7;
extern volatile bit OERR @ (((unsigned) &RCSTA)*8) + 1;
extern volatile bit PEIE @ (((unsigned) &INTCON)*8) + 6;
extern volatile bit PMRD @ (((unsigned) &PMCON1)*8) + 0;
extern volatile bit PS0 @ (((unsigned) &OPTION_REG)*8) + 0;
extern volatile bit PS1 @ (((unsigned) &OPTION_REG)*8) + 1;
extern volatile bit PS2 @ (((unsigned) &OPTION_REG)*8) + 2;
extern volatile bit PSA @ (((unsigned) &OPTION_REG)*8) + 3;
extern volatile bit RA0 @ (((unsigned) &PORTA)*8) + 0;
extern volatile bit RA1 @ (((unsigned) &PORTA)*8) + 1;
extern volatile bit RA2 @ (((unsigned) &PORTA)*8) + 2;
extern volatile bit RA3 @ (((unsigned) &PORTA)*8) + 3;
extern volatile bit RA4 @ (((unsigned) &PORTA)*8) + 4;
extern volatile bit RA5 @ (((unsigned) &PORTA)*8) + 5;
extern volatile bit RA6 @ (((unsigned) &PORTA)*8) + 6;
extern volatile bit RA7 @ (((unsigned) &PORTA)*8) + 7;
extern volatile bit RB0 @ (((unsigned) &PORTB)*8) + 0;
extern volatile bit RB1 @ (((unsigned) &PORTB)*8) + 1;
extern volatile bit RB2 @ (((unsigned) &PORTB)*8) + 2;
extern volatile bit RB3 @ (((unsigned) &PORTB)*8) + 3;
extern volatile bit RB4 @ (((unsigned) &PORTB)*8) + 4;
extern volatile bit RB5 @ (((unsigned) &PORTB)*8) + 5;
extern volatile bit RB6 @ (((unsigned) &PORTB)*8) + 6;
extern volatile bit RB7 @ (((unsigned) &PORTB)*8) + 7;
extern volatile bit RBIE @ (((unsigned) &INTCON)*8) + 3;
extern volatile bit RBIF @ (((unsigned) &INTCON)*8) + 0;
extern volatile bit RC0 @ (((unsigned) &PORTC)*8) + 0;
extern volatile bit RC1 @ (((unsigned) &PORTC)*8) + 1;
extern volatile bit RC2 @ (((unsigned) &PORTC)*8) + 2;
extern volatile bit RC3 @ (((unsigned) &PORTC)*8) + 3;
extern volatile bit RC4 @ (((unsigned) &PORTC)*8) + 4;
extern volatile bit RC5 @ (((unsigned) &PORTC)*8) + 5;
extern volatile bit RC6 @ (((unsigned) &PORTC)*8) + 6;
extern volatile bit RC7 @ (((unsigned) &PORTC)*8) + 7;
extern volatile bit RC8_9 @ (((unsigned) &RCSTA)*8) + 6;
extern volatile bit RC9 @ (((unsigned) &RCSTA)*8) + 6;
extern volatile bit RCD8 @ (((unsigned) &RCSTA)*8) + 0;
extern volatile bit RCIE @ (((unsigned) &PIE1)*8) + 5;
extern volatile bit RCIF @ (((unsigned) &PIR1)*8) + 5;
extern volatile bit RD @ (((unsigned) &PMCON1)*8) + 0;
extern volatile bit RD0 @ (((unsigned) &PORTD)*8) + 0;
extern volatile bit RD1 @ (((unsigned) &PORTD)*8) + 1;
extern volatile bit RD2 @ (((unsigned) &PORTD)*8) + 2;
extern volatile bit RD3 @ (((unsigned) &PORTD)*8) + 3;
extern volatile bit RD4 @ (((unsigned) &PORTD)*8) + 4;
extern volatile bit RD5 @ (((unsigned) &PORTD)*8) + 5;
extern volatile bit RD6 @ (((unsigned) &PORTD)*8) + 6;
extern volatile bit RD7 @ (((unsigned) &PORTD)*8) + 7;
extern volatile bit RE0 @ (((unsigned) &PORTE)*8) + 0;
extern volatile bit RE1 @ (((unsigned) &PORTE)*8) + 1;
extern volatile bit RE2 @ (((unsigned) &PORTE)*8) + 2;
extern volatile bit RE3 @ (((unsigned) &PORTE)*8) + 3;
extern volatile bit READ_WRITE @ (((unsigned) &SSPSTAT)*8) + 2;
extern volatile bit RP0 @ (((unsigned) &STATUS)*8) + 5;
extern volatile bit RP1 @ (((unsigned) &STATUS)*8) + 6;
extern volatile bit RX9 @ (((unsigned) &RCSTA)*8) + 6;
extern volatile bit RX9D @ (((unsigned) &RCSTA)*8) + 0;
extern volatile bit R_W @ (((unsigned) &SSPSTAT)*8) + 2;
extern volatile bit R_nW @ (((unsigned) &SSPSTAT)*8) + 2;
extern volatile bit SMP @ (((unsigned) &SSPSTAT)*8) + 7;
extern volatile bit SPEN @ (((unsigned) &RCSTA)*8) + 7;
extern volatile bit SREN @ (((unsigned) &RCSTA)*8) + 5;
extern volatile bit SSPEN @ (((unsigned) &SSPCON)*8) + 5;
extern volatile bit SSPIE @ (((unsigned) &PIE1)*8) + 3;
extern volatile bit SSPIF @ (((unsigned) &PIR1)*8) + 3;
extern volatile bit SSPM0 @ (((unsigned) &SSPCON)*8) + 0;
extern volatile bit SSPM1 @ (((unsigned) &SSPCON)*8) + 1;
extern volatile bit SSPM2 @ (((unsigned) &SSPCON)*8) + 2;
extern volatile bit SSPM3 @ (((unsigned) &SSPCON)*8) + 3;
extern volatile bit SSPOV @ (((unsigned) &SSPCON)*8) + 6;
extern volatile bit SSSEL @ (((unsigned) &APFCON)*8) + 1;
extern volatile bit SYNC @ (((unsigned) &TXSTA)*8) + 4;
extern volatile bit T0CS @ (((unsigned) &OPTION_REG)*8) + 5;
extern volatile bit T0IE @ (((unsigned) &INTCON)*8) + 5;
extern volatile bit T0IF @ (((unsigned) &INTCON)*8) + 2;
extern volatile bit T0SE @ (((unsigned) &OPTION_REG)*8) + 4;
extern volatile bit T0XCS @ (((unsigned) &CPSCON0)*8) + 0;
extern volatile bit T1CKPS0 @ (((unsigned) &T1CON)*8) + 4;
extern volatile bit T1CKPS1 @ (((unsigned) &T1CON)*8) + 5;
extern volatile bit T1G1SE @ (((unsigned) &T1GCON)*8) + 4;
extern volatile bit T1GGO @ (((unsigned) &T1GCON)*8) + 3;
extern volatile bit T1GGO_DONE @ (((unsigned) &T1GCON)*8) + 3;
extern volatile bit T1GGO_nDONE @ (((unsigned) &T1GCON)*8) + 3;
extern volatile bit T1GPOL @ (((unsigned) &T1GCON)*8) + 6;
extern volatile bit T1GSPM @ (((unsigned) &T1GCON)*8) + 4;
extern volatile bit T1GSS0 @ (((unsigned) &T1GCON)*8) + 0;
extern volatile bit T1GSS1 @ (((unsigned) &T1GCON)*8) + 1;
extern volatile bit T1GTM @ (((unsigned) &T1GCON)*8) + 5;
extern volatile bit T1GVAL @ (((unsigned) &T1GCON)*8) + 2;
extern volatile bit T1G_nDONE @ (((unsigned) &T1GCON)*8) + 3;
extern volatile bit T1INSYNC @ (((unsigned) &T1CON)*8) + 2;
extern volatile bit T1OSCEN @ (((unsigned) &T1CON)*8) + 3;
extern volatile bit T1SYNC @ (((unsigned) &T1CON)*8) + 2;
extern volatile bit T2CKPS0 @ (((unsigned) &T2CON)*8) + 0;
extern volatile bit T2CKPS1 @ (((unsigned) &T2CON)*8) + 1;
extern volatile bit TMR0IE @ (((unsigned) &INTCON)*8) + 5;
extern volatile bit TMR0IF @ (((unsigned) &INTCON)*8) + 2;
extern volatile bit TMR1CS0 @ (((unsigned) &T1CON)*8) + 6;
extern volatile bit TMR1CS1 @ (((unsigned) &T1CON)*8) + 7;
extern volatile bit TMR1GE @ (((unsigned) &T1GCON)*8) + 7;
extern volatile bit TMR1GIE @ (((unsigned) &PIE1)*8) + 7;
extern volatile bit TMR1GIF @ (((unsigned) &PIR1)*8) + 7;
extern volatile bit TMR1IE @ (((unsigned) &PIE1)*8) + 0;
extern volatile bit TMR1IF @ (((unsigned) &PIR1)*8) + 0;
extern volatile bit TMR1ON @ (((unsigned) &T1CON)*8) + 0;
extern volatile bit TMR2IE @ (((unsigned) &PIE1)*8) + 1;
extern volatile bit TMR2IF @ (((unsigned) &PIR1)*8) + 1;
extern volatile bit TMR2ON @ (((unsigned) &T2CON)*8) + 2;
extern volatile bit TOUTPS0 @ (((unsigned) &T2CON)*8) + 3;
extern volatile bit TOUTPS1 @ (((unsigned) &T2CON)*8) + 4;
extern volatile bit TOUTPS2 @ (((unsigned) &T2CON)*8) + 5;
extern volatile bit TOUTPS3 @ (((unsigned) &T2CON)*8) + 6;
extern volatile bit TRISA0 @ (((unsigned) &TRISA)*8) + 0;
extern volatile bit TRISA1 @ (((unsigned) &TRISA)*8) + 1;
extern volatile bit TRISA2 @ (((unsigned) &TRISA)*8) + 2;
extern volatile bit TRISA3 @ (((unsigned) &TRISA)*8) + 3;
extern volatile bit TRISA4 @ (((unsigned) &TRISA)*8) + 4;
extern volatile bit TRISA5 @ (((unsigned) &TRISA)*8) + 5;
extern volatile bit TRISA6 @ (((unsigned) &TRISA)*8) + 6;
extern volatile bit TRISA7 @ (((unsigned) &TRISA)*8) + 7;
extern volatile bit TRISB0 @ (((unsigned) &TRISB)*8) + 0;
extern volatile bit TRISB1 @ (((unsigned) &TRISB)*8) + 1;
extern volatile bit TRISB2 @ (((unsigned) &TRISB)*8) + 2;
extern volatile bit TRISB3 @ (((unsigned) &TRISB)*8) + 3;
extern volatile bit TRISB4 @ (((unsigned) &TRISB)*8) + 4;
extern volatile bit TRISB5 @ (((unsigned) &TRISB)*8) + 5;
extern volatile bit TRISB6 @ (((unsigned) &TRISB)*8) + 6;
extern volatile bit TRISB7 @ (((unsigned) &TRISB)*8) + 7;
extern volatile bit TRISC0 @ (((unsigned) &TRISC)*8) + 0;
extern volatile bit TRISC1 @ (((unsigned) &TRISC)*8) + 1;
extern volatile bit TRISC2 @ (((unsigned) &TRISC)*8) + 2;
extern volatile bit TRISC3 @ (((unsigned) &TRISC)*8) + 3;
extern volatile bit TRISC4 @ (((unsigned) &TRISC)*8) + 4;
extern volatile bit TRISC5 @ (((unsigned) &TRISC)*8) + 5;
extern volatile bit TRISC6 @ (((unsigned) &TRISC)*8) + 6;
extern volatile bit TRISC7 @ (((unsigned) &TRISC)*8) + 7;
extern volatile bit TRISD0 @ (((unsigned) &TRISD)*8) + 0;
extern volatile bit TRISD1 @ (((unsigned) &TRISD)*8) + 1;
extern volatile bit TRISD2 @ (((unsigned) &TRISD)*8) + 2;
extern volatile bit TRISD3 @ (((unsigned) &TRISD)*8) + 3;
extern volatile bit TRISD4 @ (((unsigned) &TRISD)*8) + 4;
extern volatile bit TRISD5 @ (((unsigned) &TRISD)*8) + 5;
extern volatile bit TRISD6 @ (((unsigned) &TRISD)*8) + 6;
extern volatile bit TRISD7 @ (((unsigned) &TRISD)*8) + 7;
extern volatile bit TRISE0 @ (((unsigned) &TRISE)*8) + 0;
extern volatile bit TRISE1 @ (((unsigned) &TRISE)*8) + 1;
extern volatile bit TRISE2 @ (((unsigned) &TRISE)*8) + 2;
extern volatile bit TRISE3 @ (((unsigned) &TRISE)*8) + 3;
extern volatile bit TRMT @ (((unsigned) &TXSTA)*8) + 1;
extern volatile bit TUN0 @ (((unsigned) &OSCTUNE)*8) + 0;
extern volatile bit TUN1 @ (((unsigned) &OSCTUNE)*8) + 1;
extern volatile bit TUN2 @ (((unsigned) &OSCTUNE)*8) + 2;
extern volatile bit TUN3 @ (((unsigned) &OSCTUNE)*8) + 3;
extern volatile bit TUN4 @ (((unsigned) &OSCTUNE)*8) + 4;
extern volatile bit TUN5 @ (((unsigned) &OSCTUNE)*8) + 5;
extern volatile bit TX8_9 @ (((unsigned) &TXSTA)*8) + 6;
extern volatile bit TX9 @ (((unsigned) &TXSTA)*8) + 6;
extern volatile bit TX9D @ (((unsigned) &TXSTA)*8) + 0;
extern volatile bit TXD8 @ (((unsigned) &TXSTA)*8) + 0;
extern volatile bit TXEN @ (((unsigned) &TXSTA)*8) + 5;
extern volatile bit TXIE @ (((unsigned) &PIE1)*8) + 4;
extern volatile bit TXIF @ (((unsigned) &PIR1)*8) + 4;
extern volatile bit UA @ (((unsigned) &SSPSTAT)*8) + 1;
extern volatile bit WCOL @ (((unsigned) &SSPCON)*8) + 7;
extern volatile bit WPU0 @ (((unsigned) &WPUB)*8) + 0;
extern volatile bit WPU1 @ (((unsigned) &WPUB)*8) + 1;
extern volatile bit WPU2 @ (((unsigned) &WPUB)*8) + 2;
extern volatile bit WPU3 @ (((unsigned) &WPUB)*8) + 3;
extern volatile bit WPU4 @ (((unsigned) &WPUB)*8) + 4;
extern volatile bit WPU5 @ (((unsigned) &WPUB)*8) + 5;
extern volatile bit WPU6 @ (((unsigned) &WPUB)*8) + 6;
extern volatile bit WPU7 @ (((unsigned) &WPUB)*8) + 7;
extern volatile bit WPUB0 @ (((unsigned) &WPUB)*8) + 0;
extern volatile bit WPUB1 @ (((unsigned) &WPUB)*8) + 1;
extern volatile bit WPUB2 @ (((unsigned) &WPUB)*8) + 2;
extern volatile bit WPUB3 @ (((unsigned) &WPUB)*8) + 3;
extern volatile bit WPUB4 @ (((unsigned) &WPUB)*8) + 4;
extern volatile bit WPUB5 @ (((unsigned) &WPUB)*8) + 5;
extern volatile bit WPUB6 @ (((unsigned) &WPUB)*8) + 6;
extern volatile bit WPUB7 @ (((unsigned) &WPUB)*8) + 7;
extern volatile bit ZERO @ (((unsigned) &STATUS)*8) + 2;
extern volatile bit nA @ (((unsigned) &SSPSTAT)*8) + 5;
extern volatile bit nADDRESS @ (((unsigned) &SSPSTAT)*8) + 5;
extern volatile bit nBO @ (((unsigned) &PCON)*8) + 0;
extern volatile bit nBOR @ (((unsigned) &PCON)*8) + 0;
extern volatile bit nDONE @ (((unsigned) &ADCON0)*8) + 1;
extern volatile bit nPD @ (((unsigned) &STATUS)*8) + 3;
extern volatile bit nPOR @ (((unsigned) &PCON)*8) + 1;
extern volatile bit nRBPU @ (((unsigned) &OPTION_REG)*8) + 7;
extern volatile bit nRC8 @ (((unsigned) &RCSTA)*8) + 6;
extern volatile bit nT1SYNC @ (((unsigned) &T1CON)*8) + 2;
extern volatile bit nTO @ (((unsigned) &STATUS)*8) + 4;
extern volatile bit nTX8 @ (((unsigned) &TXSTA)*8) + 6;
extern volatile bit nW @ (((unsigned) &SSPSTAT)*8) + 2;
extern volatile bit nWRITE @ (((unsigned) &SSPSTAT)*8) + 2;


# 27 "C:\Program Files (x86)\Microchip\xc8\v1.00\include\pic.h"
#pragma inline(_nop)
extern void _nop(void);

# 82
extern unsigned int flash_read(unsigned short addr);


# 155
#pragma inline(_delay)
extern void _delay(unsigned long);

# 11 "PR28.h"
typedef struct {
char BTN0 ;
char BTN1 ;
char BTN2 ;
char BTN3 ;
char BTN4 ;
char BTN5 ;
char BTN6 ;
char BTN7 ;
char BTN8 ;

} BButtons;



typedef struct {
char SSPBF : 1;
} FFlags;

# 12 "PR28.c"
asm("\tpsect config,class=CONFIG,delta=2"); asm("\tdw ""0x3CE4");

# 24
unsigned int reading[9];
unsigned int average[9];
unsigned int threshold;
unsigned char index;
unsigned int threshold4;
FFlags Flags;
BButtons Buttons;
unsigned int bigval;
unsigned int smallavg;
unsigned char result;
unsigned char result1[3];
unsigned char flag;
char data;
unsigned char matrix[3][3];

# 44
void Init(void);
void RestartTimers(void);
void RestartTimer1(void);
void SetNextChannel(void);
void CapInit(void);
void DisplayLEDs(void);
void interrupt isr(void);
void SLEEP_NOP(void);
void led_display1(unsigned char value1);
void led_display2(unsigned char value2);
void led_display3(unsigned char value3);
void delay(unsigned long data);
void send_config(unsigned char data);
void send_char(unsigned char data);
void lcd_goto(unsigned char data);
void lcd_clr(void);
void lcd_shift(void);
void send_string(const char *s);
void e_pulse(void);
void draw(void);
void led_off (void);
void GetReading(void);
void PIEZO(void);
void PIEZO_D(void);
void PIEZO_S(void);
void store(void);
void player_1(void);
void player_2(void);
void checkflag(void);
char winlose(void);
void checkstatus(void);

# 85
void main(void) {

Init();


send_config(0b00000001);
send_config(0b00000010);
send_config(0b00000110);
send_config(0b00001100);
send_config(0b00111000);
lcd_clr();
lcd_goto(0);
send_string("Cytron Technologies Sdn Bhd   ");
lcd_goto(20);
send_string("PR 28 - mTouch with Tic Tac Toe");
delay(10000);
for (int i = 0; i <15 ; i++)
{
lcd_shift();
}
delay(30000);
lcd_clr();
lcd_goto(0);
send_string("Player 1 = red");
lcd_goto(20);
send_string("Player 2 = green");
delay(60000);
lcd_clr();
lcd_goto(0);
send_string("Player 1 starts");
lcd_goto(20);
send_string("first");
delay(30000);

Buttons.BTN0 = Buttons.BTN1 = Buttons.BTN2 = Buttons.BTN3 = 0;
Buttons.BTN4 = Buttons.BTN5 = Buttons.BTN6 = Buttons.BTN7 = 0;
Buttons.BTN8 = 0;


PIEZO_S();
while (data == ' ')
{
if( flag == 0)
{
lcd_clr();
lcd_goto(0);
send_string("Player 1's turn");
}else
{
lcd_clr();
lcd_goto(0);
send_string("Player 2's turn");
}
checkflag();
data = winlose();
}
if(data =='X'){
PIEZO();
lcd_clr();
lcd_goto(0);
send_string("congratulation! ");
lcd_goto(20);
send_string("**player1 wins**");
}
if(data == 'O'){
PIEZO();
lcd_clr();
lcd_goto(0);
send_string("congratulation! ");
lcd_goto(20);
send_string("**player2 wins**");
}while(data == 'd'){
PIEZO_D();
while(1){
draw();
lcd_clr();
lcd_goto(0);
send_string("congratulation! ");
lcd_goto(20);
send_string("***draw***");
}
}
while(1){}
}

# 176
void Init(void)
{

# 192
TRISA = 0b00010000;
TRISB = 0b00000000;
TRISC = 0b00000000;
TRISD = 0b11111111;
TRISE = 0b00000000;
PORTB = 0;
PORTE = 0;

led_off();

ANSELA = 0x10;
ANSELB = 0x00;
ANSELE = 0x00;
ANSELD = 0b11111111;

result = 0;
flag = 0;
index =0;
OSCCON = 0x10;

# 219
GIE = 1;
CPSCON0 = 0b10001101;
CPSCON1 = 0b00001000;
CapInit();
data = winlose();
PEIE = 1;
}

# 234
void CapInit(void)
{


for (index=0; index<9; index++) {
average[index] = 0;
reading[index] = 0;
}
for(int i=0; i<3; i++){
for(int j=0; j<3; j++){
matrix[i][j] = ' ';
}
}

# 252
T2CON = 0b01110110;
PR2 = 0xB4;
TMR2IF = 0;
TMR2IE = 1;
T1CON = 0b11000101;
T1GCON = 0b11100010;
TMR1GIF = 0;
TMR1GIE = 1;

}

# 270
void interrupt isr(void)
{

while (TMR1GIF )
{

TMR2ON =0;
TMR1ON = 0;
TMR1GIF = 0;

GetReading();
}
}

# 290
void checkflag(void)
{
switch(flag){
case 0: player_1(); break;
case 1: player_2(); break;
default: break;
}
}

# 304
void player_1(void)
{
while(flag == 0){
checkstatus();
}

}

# 317
void player_2(void)
{
while (flag == 1){
checkstatus();
}
}

# 330
void store(void)
{
if (flag ==0){
if(Buttons.BTN0 == 1) { matrix[0][0] = 'X';}
if(Buttons.BTN1 == 1) { matrix[0][1] = 'X';}
if(Buttons.BTN2 == 1) { matrix[0][2] = 'X';}
if(Buttons.BTN3 == 1) { matrix[1][0] = 'X';}
if(Buttons.BTN4 == 1) { matrix[1][1] = 'X';}
if(Buttons.BTN5 == 1) { matrix[1][2] = 'X';}
if(Buttons.BTN6 == 1) { matrix[2][0] = 'X';}
if(Buttons.BTN7 == 1) { matrix[2][1] = 'X';}
if(Buttons.BTN8 == 1) { matrix[2][2] = 'X';}
}
else if(flag == 1){
if(Buttons.BTN0 == 1) { matrix[0][0] = 'O';}
if(Buttons.BTN1 == 1) { matrix[0][1] = 'O';}
if(Buttons.BTN2 == 1) { matrix[0][2] = 'O';}
if(Buttons.BTN3 == 1) { matrix[1][0] = 'O';}
if(Buttons.BTN4 == 1) { matrix[1][1] = 'O';}
if(Buttons.BTN5 == 1) { matrix[1][2] = 'O';}
if(Buttons.BTN6 == 1) { matrix[2][0] = 'O';}
if(Buttons.BTN7 == 1) { matrix[2][1] = 'O';}
if(Buttons.BTN8 == 1) { matrix[2][2] = 'O';}
}
}

# 362
void checkstatus(void){
if(Buttons.BTN0 ==1){
if (matrix[0][0] =='X' | matrix[0][0] == 'O')
{ if(flag==0){flag = 0;}
else
flag = 1;
}else {
store();
DisplayLEDs();
if(flag ==0){flag = 1;}
else
flag = 0;
}
}
if(Buttons.BTN1 ==1){
if (matrix[0][1] =='X' | matrix[0][1] == 'O')
{ if(flag==0){flag = 0;}
else
flag = 1;
}else {
store();
DisplayLEDs();
if(flag ==0){flag = 1;}
else
flag = 0;
}
}
if(Buttons.BTN2 ==1){
if (matrix[0][2] =='X' | matrix[0][2] == 'O')
{ if(flag==0){flag = 0;}
else
flag = 1;
}else {
store();
DisplayLEDs();
if(flag ==0){flag = 1;}
else
flag = 0;
}
}
if(Buttons.BTN3 ==1){
if (matrix[1][0] =='X' | matrix[1][0] == 'O')
{ if(flag==0){flag = 0;}
else
flag = 1;
}else {
store();
DisplayLEDs();
if(flag ==0){flag = 1;}
else
flag = 0;
}
}
if(Buttons.BTN4 ==1){
if (matrix[1][1] =='X' | matrix[1][1] == 'O')
{ if(flag==0){flag = 0;}
else
flag = 1;
}else {
store();
DisplayLEDs();
if(flag ==0){flag = 1;}
else
flag = 0;
}
}
if(Buttons.BTN5 ==1){
if (matrix[1][2] =='X' | matrix[1][2] == 'O')
{ if(flag==0){flag = 0;}
else
flag = 1;
}else {
store();
DisplayLEDs();
if(flag ==0){flag = 1;}
else
flag = 0;
}
}
if(Buttons.BTN6 ==1){
if (matrix[2][0] =='X' | matrix[2][0] == 'O')
{ if(flag==0){flag = 0;}
else
flag = 1;
}else {
store();
DisplayLEDs();
if(flag ==0){flag = 1;}
else
flag = 0;
}
}
if(Buttons.BTN7 ==1){
if (matrix[2][1] =='X' | matrix[2][1] == 'O')
{ if(flag==0){flag = 0;}
else
flag = 1;
}else {
store();
DisplayLEDs();
if(flag ==0){flag = 1;}
else
flag = 0;
}
}
if(Buttons.BTN8 ==1){
if (matrix[2][2] =='X' | matrix[2][2] == 'O')
{ if(flag==0){flag = 0;}
else
flag = 1;
}else {
store();
DisplayLEDs();
if(flag ==0){flag = 1;}
else
flag = 0;
}
}
}

# 488
void GetReading(void){
bigval = TMR1L + (unsigned int)(TMR1H << 8);
bigval = bigval * 16;
reading[index] = bigval;
smallavg = average[index] / 16;
threshold4 = average[index] >> 2;
threshold = threshold4;
if (bigval < average[index] - threshold)
{
switch (index)
{
case 0: Buttons.BTN0 = 1; break;
case 1: Buttons.BTN1 = 1; break;
case 2: Buttons.BTN2 = 1; break;
case 3: Buttons.BTN3 = 1; break;
case 4: Buttons.BTN4 = 1; break;
case 5: Buttons.BTN5 = 1; break;
case 6: Buttons.BTN6 = 1; break;
case 7: Buttons.BTN7 = 1; break;
case 8: Buttons.BTN8 = 1; break;

default: break;
}
}
else
{

switch (index)
{
case 0: Buttons.BTN0 = 0; break;
case 1: Buttons.BTN1 = 0; break;
case 2: Buttons.BTN2 = 0; break;
case 3: Buttons.BTN3 = 0; break;
case 4: Buttons.BTN4 = 0; break;
case 5: Buttons.BTN5 = 0; break;
case 6: Buttons.BTN6 = 0; break;
case 7: Buttons.BTN7 = 0; break;
case 8: Buttons.BTN8 = 0; break;

default: break;
}


average[index] += bigval/16 - smallavg;
}
SetNextChannel();
RestartTimer1();
}

# 543
void RestartTimer1(void)
{
TMR1L = 0;
TMR1H = 0;
TMR2 = 0;
TMR2IF = 0;
TMR1ON = 1;
TMR2ON = 1;
}

# 559
void SetNextChannel(void)
{
if (++index>= 9)
index = 0;
else;
if(index==0)
CPSCON1 = 0b00001000;
if(index==1)
CPSCON1 = 0b00001001;
if(index==2)
CPSCON1 = 0b00001010;
if(index == 3)
CPSCON1 = 0b00001011;
if(index== 4)
CPSCON1 = 0b00001100;
if(index == 5)
CPSCON1 = 0b00001101;
if(index ==6)
CPSCON1 = 0b00001110;
if (index ==7)
CPSCON1 = 0b00001111;
if (index == 8)
CPSCON1 = 0b00000110;
}

# 590
void DisplayLEDs(void)
{
RC5 = 1; RC6 =1; RC7 =1;
RA6 = RA7 = RA0 = 0;


for(int k = 0; k< 3 ; k++)
{
led_display1(result1[0]);led_display2(result1[1]);led_display3(result1[2]);
if(matrix[0][k] == 'O' & matrix[1][k] == 'O' & matrix[2][k] == 'O'){result1[k] = 0b01001001;}
else if(matrix[0][k] == 'O' & matrix[1][k] == 'O' & matrix[2][k] == ' '){result1[k] = 0b01001000;}
else if(matrix[0][k] == 'O' & matrix[1][k] == ' ' & matrix[2][k] == 'O'){result1[k] = 0b01000001;}
else if(matrix[0][k] == 'O' & matrix[1][k] == ' ' & matrix[2][k] == ' '){result1[k] = 0b01000000;}
else if(matrix[0][k] == ' ' & matrix[1][k] == 'O' & matrix[2][k] == 'O'){result1[k] = 0b00001001;}
else if(matrix[0][k] == ' ' & matrix[1][k] == 'O' & matrix[2][k] == ' '){result1[k] = 0b00001000;}
else if(matrix[0][k] == ' ' & matrix[1][k] == ' ' & matrix[2][k] == 'O'){result1[k] = 0b00000001;}

else if(matrix[0][k] == 'O' & matrix[1][k] == 'O' & matrix[2][k] == 'X'){result1[k] = 0b01001010;}
else if(matrix[0][k] == 'O' & matrix[1][k] == 'O' & matrix[2][k] == ' '){result1[k] = 0b01001000;}
else if(matrix[0][k] == 'O' & matrix[1][k] == ' ' & matrix[2][k] == 'X'){result1[k] = 0b01000010;}
else if(matrix[0][k] == 'O' & matrix[1][k] == ' ' & matrix[2][k] == ' '){result1[k] = 0b01000000;}
else if(matrix[0][k] == ' ' & matrix[1][k] == 'O' & matrix[2][k] == 'X'){result1[k] = 0b00001010;}
else if(matrix[0][k] == ' ' & matrix[1][k] == 'O' & matrix[2][k] == ' '){result1[k] = 0b00001000;}
else if(matrix[0][k] == ' ' & matrix[1][k] == ' ' & matrix[2][k] == 'X'){result1[k] = 0b00000010;}

else if(matrix[0][k] == 'O' & matrix[1][k] == 'X' & matrix[2][k] == 'O'){result1[k] = 0b01010001;}
else if(matrix[0][k] == 'O' & matrix[1][k] == 'X' & matrix[2][k] == ' '){result1[k] = 0b01010000;}
else if(matrix[0][k] == 'O' & matrix[1][k] == ' ' & matrix[2][k] == 'O'){result1[k] = 0b01000001;}
else if(matrix[0][k] == 'O' & matrix[1][k] == ' ' & matrix[2][k] == ' '){result1[k] = 0b01000000;}
else if(matrix[0][k] == ' ' & matrix[1][k] == 'X' & matrix[2][k] == 'O'){result1[k] = 0b00010001;}
else if(matrix[0][k] == ' ' & matrix[1][k] == 'X' & matrix[2][k] == ' '){result1[k] = 0b00010000;}
else if(matrix[0][k] == ' ' & matrix[1][k] == ' ' & matrix[2][k] == 'O'){result1[k] = 0b00000001;}

else if(matrix[0][k] == 'O' & matrix[1][k] == 'X' & matrix[2][k] == 'X'){result1[k] = 0b01010010;}
else if(matrix[0][k] == 'O' & matrix[1][k] == 'X' & matrix[2][k] == ' '){result1[k] = 0b01010000;}
else if(matrix[0][k] == 'O' & matrix[1][k] == ' ' & matrix[2][k] == 'X'){result1[k] = 0b01000010;}
else if(matrix[0][k] == 'O' & matrix[1][k] == ' ' & matrix[2][k] == ' '){result1[k] = 0b01000000;}
else if(matrix[0][k] == ' ' & matrix[1][k] == 'X' & matrix[2][k] == 'X'){result1[k] = 0b00010010;}
else if(matrix[0][k] == ' ' & matrix[1][k] == 'X' & matrix[2][k] == ' '){result1[k] = 0b00010000;}
else if(matrix[0][k] == ' ' & matrix[1][k] == ' ' & matrix[2][k] == 'X'){result1[k] = 0b00000010;}

else if(matrix[0][k] == 'X' & matrix[1][k] == 'O' & matrix[2][k] == 'O'){result1[k] = 0b10001001;}
else if(matrix[0][k] == 'X' & matrix[1][k] == 'O' & matrix[2][k] == ' '){result1[k] = 0b10001000;}
else if(matrix[0][k] == 'X' & matrix[1][k] == ' ' & matrix[2][k] == 'O'){result1[k] = 0b10000001;}
else if(matrix[0][k] == 'X' & matrix[1][k] == ' ' & matrix[2][k] == ' '){result1[k] = 0b10000000;}
else if(matrix[0][k] == ' ' & matrix[1][k] == 'O' & matrix[2][k] == 'O'){result1[k] = 0b00001001;}
else if(matrix[0][k] == ' ' & matrix[1][k] == 'O' & matrix[2][k] == ' '){result1[k] = 0b00001000;}
else if(matrix[0][k] == ' ' & matrix[1][k] == ' ' & matrix[2][k] == 'O'){result1[k] = 0b00000001;}

else if(matrix[0][k] == 'X' & matrix[1][k] == 'O' & matrix[2][k] == 'X'){result1[k] = 0b10001010;}
else if(matrix[0][k] == 'X' & matrix[1][k] == 'O' & matrix[2][k] == ' '){result1[k] = 0b10001000;}
else if(matrix[0][k] == 'X' & matrix[1][k] == ' ' & matrix[2][k] == 'X'){result1[k] = 0b10000010;}
else if(matrix[0][k] == 'X' & matrix[1][k] == ' ' & matrix[2][k] == ' '){result1[k] = 0b10000000;}
else if(matrix[0][k] == ' ' & matrix[1][k] == 'O' & matrix[2][k] == 'X'){result1[k] = 0b00001010;}
else if(matrix[0][k] == ' ' & matrix[1][k] == 'O' & matrix[2][k] == ' '){result1[k] = 0b00001000;}
else if(matrix[0][k] == ' ' & matrix[1][k] == ' ' & matrix[2][k] == 'X'){result1[k] = 0b00000010;}

else if(matrix[0][k] == 'X' & matrix[1][k] == 'X' & matrix[2][k] == 'O'){result1[k] = 0b10010001;}
else if(matrix[0][k] == 'X' & matrix[1][k] == 'X' & matrix[2][k] == ' '){result1[k] = 0b10010000;}
else if(matrix[0][k] == 'X' & matrix[1][k] == ' ' & matrix[2][k] == 'O'){result1[k] = 0b10000001;}
else if(matrix[0][k] == 'X' & matrix[1][k] == ' ' & matrix[2][k] == ' '){result1[k] = 0b10000000;}
else if(matrix[0][k] == ' ' & matrix[1][k] == 'X' & matrix[2][k] == 'O'){result1[k] = 0b00010001;}
else if(matrix[0][k] == ' ' & matrix[1][k] == 'X' & matrix[2][k] == ' '){result1[k] = 0b00010000;}
else if(matrix[0][k] == ' ' & matrix[1][k] == ' ' & matrix[2][k] == 'O'){result1[k] = 0b00000001;}

else if(matrix[0][k] == 'X' & matrix[1][k] == 'X' & matrix[2][k] == 'X'){result1[k] = 0b10010010;}
else if(matrix[0][k] == 'X' & matrix[1][k] == 'X' & matrix[2][k] == ' '){result1[k] = 0b10010000;}
else if(matrix[0][k] == 'X' & matrix[1][k] == ' ' & matrix[2][k] == 'X'){result1[k] = 0b10000010;}
else if(matrix[0][k] == 'X' & matrix[1][k] == ' ' & matrix[2][k] == ' '){result1[k] = 0b10000000;}
else if(matrix[0][k] == ' ' & matrix[1][k] == 'X' & matrix[2][k] == 'X'){result1[k] = 0b00010010;}
else if(matrix[0][k] == ' ' & matrix[1][k] == 'X' & matrix[2][k] == ' '){result1[k] = 0b00010000;}
else if(matrix[0][k] == ' ' & matrix[1][k] == ' ' & matrix[2][k] == 'X'){result1[k] = 0b00000010;}

led_display1(result1[0]);led_display2(result1[1]);led_display3(result1[2]);
}
}

# 671
void led_display1(unsigned char value1)
{
if((value1&0b00000001)==1) RC1=1;
else RC1=0;
RC3=1;
RC3=0;

if(((value1&0b00000010)>>1)==1) RC1=1;
else RC1=0;
RC3=1;
RC3=0;

if(((value1&0b00000100)>>2)==1) RC1=1;
else RC1=0;
RC3=1;
RC3=0;

if(((value1&0b00001000)>>3)==1) RC1=1;
else RC1=0;
RC3=1;
RC3=0;

if(((value1&0b00010000)>>4)==1) RC1=1;
else RC1=0;
RC3=1;
RC3=0;

if(((value1&0b00100000)>>5)==1) RC1=1;
else RC1=0;
RC3=1;
RC3=0;

if(((value1&0b01000000)>>6)==1) RC1=1;
else RC1=0;
RC3=1;
RC3=0;

if(((value1&0b10000000)>>7)==1) RC1=1;
else RC1=0;
RC3=1;
RC3=0;

RC4=1;
RC4=0;
}

# 721
void led_display2(unsigned char value2)
{
if((value2&0b00000001)==1) RA5=1;
else RA5=0;
RC0=1;
RC0=0;

if(((value2&0b00000010)>>1)==1) RA5=1;
else RA5=0;
RC0=1;
RC0=0;

if(((value2&0b00000100)>>2)==1) RA5=1;
else RA5=0;
RC0=1;
RC0=0;

if(((value2&0b00001000)>>3)==1) RA5=1;
else RA5=0;
RC0=1;
RC0=0;

if(((value2&0b00010000)>>4)==1) RA5=1;
else RA5=0;
RC0=1;
RC0=0;

if(((value2&0b00100000)>>5)==1) RA5=1;
else RA5=0;
RC0=1;
RC0=0;

if(((value2&0b01000000)>>6)==1) RA5=1;
else RA5=0;
RC0=1;
RC0=0;

if(((value2&0b10000000)>>7)==1) RA5=1;
else RA5=0;
RC0=1;
RC0=0;

RE2=1;
RE2=0;
}

# 771
void led_display3(unsigned char value3)
{
if((value3&0b00000001)==1) RA1=1;
else RA1=0;
RA3=1;
RA3=0;

if(((value3&0b00000010)>>1)==1) RA1=1;
else RA1=0;
RA3=1;
RA3=0;

if(((value3&0b00000100)>>2)==1) RA1=1;
else RA1=0;
RA3=1;
RA3=0;

if(((value3&0b00001000)>>3)==1) RA1=1;
else RA1=0;
RA3=1;
RA3=0;

if(((value3&0b00010000)>>4)==1) RA1=1;
else RA1=0;
RA3=1;
RA3=0;

if(((value3&0b00100000)>>5)==1) RA1=1;
else RA1=0;
RA3=1;
RA3=0;

if(((value3&0b01000000)>>6)==1) RA1=1;
else RA1=0;
RA3=1;
RA3=0;

if(((value3&0b10000000)>>7)==1) RA1=1;
else RA1=0;
RA3=1;
RA3=0;

RA2=1;
RA2=0;
}

# 821
void delay(unsigned long data)
{
for( ;data>0;data-=1);
}

# 830
void send_config(unsigned char data)
{
RE0=0;
PORTB=data;
delay(50);
e_pulse();
}

# 842
void send_char(unsigned char data)
{
RE0=1;
PORTB=data;
delay(50);
e_pulse();
}

# 854
void e_pulse(void)
{
RE1=1;
delay(50);
RE1=0;
delay(50);
}

# 866
void lcd_goto(unsigned char data)
{
if(data<16)
{
send_config(0x80+data);
}
else
{
data=data-20;
send_config(0xc0+data);
}
}

# 883
void lcd_shift(void)
{
send_config(0x18);
delay(6000);
}

# 893
void lcd_clr(void)
{
send_config(0x01);
delay(50);
}

# 903
void send_string(const char *s)
{

while (s && *s)send_char (*s++);

}

# 914
void draw(void){

RC5 = RC6 = RC7 = 1;
result = 0b00100100;
RA6 = RA7 = RA0 = 1;
led_display1(result);
led_display2(result);
led_display3(result);
delay(3500);
led_off();
delay(3500);
}

# 931
void led_off(void)
{
result = 0b00000000;
RA6 = RA7 = RA0 = 0;
RC5 = RC6 = RC7 = 0;
led_display1(result);
led_display2(result);
led_display3(result);
}

# 945
void PIEZO(void)
{
GIE=0;
TMR2ON = 0;
TMR1ON = 0;

CCP1CON = 0b00001100;
T2CON = 0b00000111;
PR2 = 0x76;
CCPR1L = 50;
delay(4000);
PR2 = 0x7D;
CCPR1L = 50;
delay(4000);
PR2 = 0x9E;
CCPR1L = 50;
delay(4000);
PR2 = 0x76;
CCPR1L = 100;
delay(8000);
PR2 = 0x7D;
CCPR1L = 100;
delay(8000);
PR2 = 0xBD;
CCPR1L = 50;
delay(4000);
PR2 = 0x00;
CCPR1L = 50;
delay(2000);
PR2 = 0x76;
CCPR1L = 50;
delay(4000);
PR2 = 0xEE;
CCPR1L = 50;
delay(4000);
PR2 = 0x9E;
CCPR1L = 50;
delay(4000);
PR2 = 0x8D;
CCPR1L = 50;
delay(8000);
PR2 = 0x76;
CCPR1L = 50;
delay(8000);

CCP1CON = 0x00;
T2CON=0b01110110;
PR2 = 0xB4;
CCPR1L = 0;

TMR2IF = 0;
TMR2IE = 1;
T1CON = 0b11000101;
T1GCON = 0b11100010;
TMR1GIF = 0;
TMR1GIE = 1;

RestartTimer1();
GIE = 1;
}

# 1010
void PIEZO_D(void)
{
GIE=0;
TMR2ON = 0;
TMR1ON = 0;
CCP1CON = 0b00001100;
T2CON = 0b00000111;
PR2 = 0xBC;
CCPR1L = 50;
delay(4000);
PR2 = 0xBC;
CCPR1L = 50;
delay(4000);
PR2 = 0xB2;
CCPR1L = 50;
delay(4000);
PR2 = 0x9E;
CCPR1L = 100;
delay(4000);
PR2 = 0x9E;
CCPR1L = 100;
delay(4000);
PR2 = 0xB2;
CCPR1L = 50;
delay(4000);
PR2 = 0xBC;
CCPR1L = 50;
delay(4000);
PR2 = 0xD3;
CCPR1L = 50;
delay(4000);
PR2 = 0xEE;
CCPR1L = 50;
delay(4000);
PR2 = 0xEE;
CCPR1L = 50;
delay(4000);
PR2 = 0xD3;
CCPR1L = 50;
delay(4000);
PR2 = 0xBC;
CCPR1L = 50;
delay(4000);
PR2 = 0xBC;
CCPR1L = 50;
delay(4000);
PR2 = 0xD3;
CCPR1L = 50;
delay(2000);
PR2 = 0xD3;
CCPR1L = 50;
delay(8000);
PR2 = 0xBC;
CCPR1L = 50;
delay(4000);
PR2 = 0xBC;
CCPR1L = 50;
delay(4000);
PR2 = 0xB2;
CCPR1L = 50;
delay(4000);
PR2 = 0x9E;
CCPR1L = 50;
delay(4000);
PR2 = 0x9E;
CCPR1L = 50;
delay(4000);
PR2 = 0xB2;
CCPR1L = 50;
delay(4000);
PR2 = 0xBC;
CCPR1L = 50;
delay(4000);
PR2 = 0xD3;
CCPR1L = 50;
delay(4000);
PR2 = 0xEE;
CCPR1L = 50;
delay(4000);
PR2 = 0xEE;
CCPR1L = 50;
delay(4000);
PR2 = 0xD3;
CCPR1L = 50;
delay(4000);
PR2 = 0xBC;
CCPR1L = 50;
delay(4000);
PR2 = 0xD3;
CCPR1L = 50;
delay(4000);
PR2 = 0xEE;
CCPR1L = 50;
delay(2000);
PR2 = 0xEE;
CCPR1L = 50;
delay(8000);

CCP1CON = 0x00;
T2CON=0b01110110;
PR2 = 0xB4;
CCPR1L = 0;

TMR2IF = 0;
TMR2IE = 1;
T1CON = 0b11000101;
T1GCON = 0b11100010;
TMR1GIF = 0;
TMR1GIE = 1;

RestartTimer1();
GIE = 1;
}

# 1128
void PIEZO_S(void)
{
GIE=0;
TMR2ON = 0;
TMR1ON = 0;

CCP1CON = 0b00001100;
T2CON = 0b00000111;

PR2 = 0xEE;
CCPR1L = 50;
delay(2000);
PR2 = 0xD3;
CCPR1L = 50;
delay(2000);
PR2 = 0xBD;
CCPR1L = 100;
delay(2000);
PR2 = 0xB2;
CCPR1L = 100;
delay(2000);
PR2 = 0x9E;
CCPR1L = 50;
delay(2000);
PR2 = 0x8D;
CCPR1L = 50;
delay(2000);
PR2 = 0x7D;
CCPR1L = 50;
delay(2000);
PR2 = 0x76;
CCPR1L = 50;
delay(4000);


CCP1CON = 0x00;
T2CON=0b01110110;
PR2 = 0xB4;
CCPR1L = 0;

TMR2IF = 0;
TMR2IE = 1;
T1CON = 0b11000101;
T1GCON = 0b11100010;
TMR1GIF = 0;
TMR1GIE = 1;

RestartTimer1();
GIE = 1;
}

# 1183
char winlose(void)
{
int status;
int i,j;
status =0;
char flag_w;
for(int i=0; i<3; i++)
{

if((matrix[i][0]== matrix[i][1]) & (matrix[i][0] == matrix[i][2])){
return matrix[i][0];
}

if(matrix[0][i] == matrix[1][i] & matrix[0][i] == matrix[2][i]){
return matrix[0][i];
}

if(matrix[0][0] == matrix[1][1] & matrix[0][0] == matrix[2][2]){
return matrix[0][0];
}
if(matrix[0][2] == matrix[1][1] & matrix[0][2] == matrix[2][0]){
return matrix[0][2];
}


}
for(int i=0; i<3; i++){
for(int j=0; j<3; j++){
if(matrix[i][j] == ' '){
status++;
}else{
status = status;
}
}
}
if(status == 0){
flag_w = 'd';
return flag_w;
}else{
flag_w = ' ';
return flag_w;
}
}
