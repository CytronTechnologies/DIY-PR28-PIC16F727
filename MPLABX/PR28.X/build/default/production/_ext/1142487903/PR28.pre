
# 1 "../../Source file/PR28.c"

# 26 "C:\Program Files (x86)\Microchip\xc8\v1.34\include\htc.h"
extern const char __xc8_OPTIM_SPEED;


# 13 "C:\Program Files (x86)\Microchip\xc8\v1.34\include\xc8debug.h"
#pragma intrinsic(__builtin_software_breakpoint)
extern void __builtin_software_breakpoint(void);

# 49 "C:\Program Files (x86)\Microchip\xc8\v1.34\include\pic16f727.h"
extern volatile unsigned char INDF @ 0x000;

asm("INDF equ 00h");



extern volatile unsigned char TMR0 @ 0x001;

asm("TMR0 equ 01h");



extern volatile unsigned char PCL @ 0x002;

asm("PCL equ 02h");



extern volatile unsigned char STATUS @ 0x003;

asm("STATUS equ 03h");


typedef union {
struct {
unsigned C :1;
unsigned DC :1;
unsigned Z :1;
unsigned nPD :1;
unsigned nTO :1;
unsigned RP :2;
unsigned IRP :1;
};
struct {
unsigned :5;
unsigned RP0 :1;
unsigned RP1 :1;
};
struct {
unsigned CARRY :1;
};
struct {
unsigned :2;
unsigned ZERO :1;
};
} STATUSbits_t;
extern volatile STATUSbits_t STATUSbits @ 0x003;

# 154
extern volatile unsigned char FSR @ 0x004;

asm("FSR equ 04h");



extern volatile unsigned char PORTA @ 0x005;

asm("PORTA equ 05h");


typedef union {
struct {
unsigned RA0 :1;
unsigned RA1 :1;
unsigned RA2 :1;
unsigned RA3 :1;
unsigned RA4 :1;
unsigned RA5 :1;
unsigned RA6 :1;
unsigned RA7 :1;
};
} PORTAbits_t;
extern volatile PORTAbits_t PORTAbits @ 0x005;

# 221
extern volatile unsigned char PORTB @ 0x006;

asm("PORTB equ 06h");


typedef union {
struct {
unsigned RB0 :1;
unsigned RB1 :1;
unsigned RB2 :1;
unsigned RB3 :1;
unsigned RB4 :1;
unsigned RB5 :1;
unsigned RB6 :1;
unsigned RB7 :1;
};
} PORTBbits_t;
extern volatile PORTBbits_t PORTBbits @ 0x006;

# 282
extern volatile unsigned char PORTC @ 0x007;

asm("PORTC equ 07h");


typedef union {
struct {
unsigned RC0 :1;
unsigned RC1 :1;
unsigned RC2 :1;
unsigned RC3 :1;
unsigned RC4 :1;
unsigned RC5 :1;
unsigned RC6 :1;
unsigned RC7 :1;
};
} PORTCbits_t;
extern volatile PORTCbits_t PORTCbits @ 0x007;

# 343
extern volatile unsigned char PORTD @ 0x008;

asm("PORTD equ 08h");


typedef union {
struct {
unsigned RD0 :1;
unsigned RD1 :1;
unsigned RD2 :1;
unsigned RD3 :1;
unsigned RD4 :1;
unsigned RD5 :1;
unsigned RD6 :1;
unsigned RD7 :1;
};
} PORTDbits_t;
extern volatile PORTDbits_t PORTDbits @ 0x008;

# 404
extern volatile unsigned char PORTE @ 0x009;

asm("PORTE equ 09h");


typedef union {
struct {
unsigned RE0 :1;
unsigned RE1 :1;
unsigned RE2 :1;
unsigned RE3 :1;
};
} PORTEbits_t;
extern volatile PORTEbits_t PORTEbits @ 0x009;

# 441
extern volatile unsigned char PCLATH @ 0x00A;

asm("PCLATH equ 0Ah");



extern volatile unsigned char INTCON @ 0x00B;

asm("INTCON equ 0Bh");


typedef union {
struct {
unsigned RBIF :1;
unsigned INTF :1;
unsigned T0IF :1;
unsigned RBIE :1;
unsigned INTE :1;
unsigned T0IE :1;
unsigned PEIE :1;
unsigned GIE :1;
};
struct {
unsigned IOCIF :1;
unsigned :1;
unsigned TMR0IF :1;
unsigned IOCIE :1;
unsigned :1;
unsigned TMR0IE :1;
};
} INTCONbits_t;
extern volatile INTCONbits_t INTCONbits @ 0x00B;

# 536
extern volatile unsigned char PIR1 @ 0x00C;

asm("PIR1 equ 0Ch");


typedef union {
struct {
unsigned TMR1IF :1;
unsigned TMR2IF :1;
unsigned CCP1IF :1;
unsigned SSPIF :1;
unsigned TXIF :1;
unsigned RCIF :1;
unsigned ADIF :1;
unsigned TMR1GIF :1;
};
} PIR1bits_t;
extern volatile PIR1bits_t PIR1bits @ 0x00C;

# 597
extern volatile unsigned char PIR2 @ 0x00D;

asm("PIR2 equ 0Dh");


typedef union {
struct {
unsigned CCP2IF :1;
};
} PIR2bits_t;
extern volatile PIR2bits_t PIR2bits @ 0x00D;

# 616
extern volatile unsigned short TMR1 @ 0x00E;

asm("TMR1 equ 0Eh");



extern volatile unsigned char TMR1L @ 0x00E;

asm("TMR1L equ 0Eh");



extern volatile unsigned char TMR1H @ 0x00F;

asm("TMR1H equ 0Fh");



extern volatile unsigned char T1CON @ 0x010;

asm("T1CON equ 010h");


typedef union {
struct {
unsigned TMR1ON :1;
unsigned :1;
unsigned T1SYNC :1;
unsigned T1OSCEN :1;
unsigned T1CKPS :2;
unsigned TMR1CS :2;
};
struct {
unsigned :2;
unsigned nT1SYNC :1;
unsigned :1;
unsigned T1CKPS0 :1;
unsigned T1CKPS1 :1;
unsigned TMR1CS0 :1;
unsigned TMR1CS1 :1;
};
struct {
unsigned :2;
unsigned T1INSYNC :1;
};
} T1CONbits_t;
extern volatile T1CONbits_t T1CONbits @ 0x010;

# 721
extern volatile unsigned char TMR2 @ 0x011;

asm("TMR2 equ 011h");



extern volatile unsigned char T2CON @ 0x012;

asm("T2CON equ 012h");


typedef union {
struct {
unsigned T2CKPS :2;
unsigned TMR2ON :1;
unsigned TOUTPS :4;
};
struct {
unsigned T2CKPS0 :1;
unsigned T2CKPS1 :1;
unsigned :1;
unsigned TOUTPS0 :1;
unsigned TOUTPS1 :1;
unsigned TOUTPS2 :1;
unsigned TOUTPS3 :1;
};
} T2CONbits_t;
extern volatile T2CONbits_t T2CONbits @ 0x012;

# 797
extern volatile unsigned char SSPBUF @ 0x013;

asm("SSPBUF equ 013h");



extern volatile unsigned char SSPCON @ 0x014;

asm("SSPCON equ 014h");


typedef union {
struct {
unsigned SSPM :4;
unsigned CKP :1;
unsigned SSPEN :1;
unsigned SSPOV :1;
unsigned WCOL :1;
};
struct {
unsigned SSPM0 :1;
unsigned SSPM1 :1;
unsigned SSPM2 :1;
unsigned SSPM3 :1;
};
} SSPCONbits_t;
extern volatile SSPCONbits_t SSPCONbits @ 0x014;

# 872
extern volatile unsigned short CCPR1 @ 0x015;

asm("CCPR1 equ 015h");



extern volatile unsigned char CCPR1L @ 0x015;

asm("CCPR1L equ 015h");



extern volatile unsigned char CCPR1H @ 0x016;

asm("CCPR1H equ 016h");



extern volatile unsigned char CCP1CON @ 0x017;

asm("CCP1CON equ 017h");


typedef union {
struct {
unsigned CCP1M :4;
unsigned DC1B :2;
};
struct {
unsigned CCP1M0 :1;
unsigned CCP1M1 :1;
unsigned CCP1M2 :1;
unsigned CCP1M3 :1;
unsigned DC1B0 :1;
unsigned DC1B1 :1;
};
struct {
unsigned :4;
unsigned CCP1Y :1;
unsigned CCP1X :1;
};
} CCP1CONbits_t;
extern volatile CCP1CONbits_t CCP1CONbits @ 0x017;

# 968
extern volatile unsigned char RCSTA @ 0x018;

asm("RCSTA equ 018h");


typedef union {
struct {
unsigned RX9D :1;
unsigned OERR :1;
unsigned FERR :1;
unsigned ADDEN :1;
unsigned CREN :1;
unsigned SREN :1;
unsigned RX9 :1;
unsigned SPEN :1;
};
struct {
unsigned RCD8 :1;
unsigned :5;
unsigned RC9 :1;
};
struct {
unsigned :6;
unsigned nRC8 :1;
};
struct {
unsigned :6;
unsigned RC8_9 :1;
};
} RCSTAbits_t;
extern volatile RCSTAbits_t RCSTAbits @ 0x018;

# 1062
extern volatile unsigned char TXREG @ 0x019;

asm("TXREG equ 019h");



extern volatile unsigned char RCREG @ 0x01A;

asm("RCREG equ 01Ah");



extern volatile unsigned short CCPR2 @ 0x01B;

asm("CCPR2 equ 01Bh");



extern volatile unsigned char CCPR2L @ 0x01B;

asm("CCPR2L equ 01Bh");



extern volatile unsigned char CCPR2H @ 0x01C;

asm("CCPR2H equ 01Ch");



extern volatile unsigned char CCP2CON @ 0x01D;

asm("CCP2CON equ 01Dh");


typedef union {
struct {
unsigned CCP2M :4;
unsigned DC2B :2;
};
struct {
unsigned CCP2M0 :1;
unsigned CCP2M1 :1;
unsigned CCP2M2 :1;
unsigned CCP2M3 :1;
unsigned DC2B0 :1;
unsigned DC2B1 :1;
};
struct {
unsigned :4;
unsigned CCP2Y :1;
unsigned CCP2X :1;
};
} CCP2CONbits_t;
extern volatile CCP2CONbits_t CCP2CONbits @ 0x01D;

# 1170
extern volatile unsigned char ADRES @ 0x01E;

asm("ADRES equ 01Eh");



extern volatile unsigned char ADCON0 @ 0x01F;

asm("ADCON0 equ 01Fh");


typedef union {
struct {
unsigned ADON :1;
unsigned GO_nDONE :1;
unsigned CHS :4;
};
struct {
unsigned :1;
unsigned GO :1;
unsigned CHS0 :1;
unsigned CHS1 :1;
unsigned CHS2 :1;
unsigned CHS3 :1;
};
struct {
unsigned :1;
unsigned nDONE :1;
};
struct {
unsigned :1;
unsigned GO_DONE :1;
};
} ADCON0bits_t;
extern volatile ADCON0bits_t ADCON0bits @ 0x01F;

# 1258
extern volatile unsigned char OPTION_REG @ 0x081;

asm("OPTION_REG equ 081h");


typedef union {
struct {
unsigned PS :3;
unsigned PSA :1;
unsigned T0SE :1;
unsigned T0CS :1;
unsigned INTEDG :1;
unsigned nRBPU :1;
};
struct {
unsigned PS0 :1;
unsigned PS1 :1;
unsigned PS2 :1;
};
} OPTION_REGbits_t;
extern volatile OPTION_REGbits_t OPTION_REGbits @ 0x081;

# 1327
extern volatile unsigned char TRISA @ 0x085;

asm("TRISA equ 085h");


typedef union {
struct {
unsigned TRISA0 :1;
unsigned TRISA1 :1;
unsigned TRISA2 :1;
unsigned TRISA3 :1;
unsigned TRISA4 :1;
unsigned TRISA5 :1;
unsigned TRISA6 :1;
unsigned TRISA7 :1;
};
} TRISAbits_t;
extern volatile TRISAbits_t TRISAbits @ 0x085;

# 1388
extern volatile unsigned char TRISB @ 0x086;

asm("TRISB equ 086h");


typedef union {
struct {
unsigned TRISB0 :1;
unsigned TRISB1 :1;
unsigned TRISB2 :1;
unsigned TRISB3 :1;
unsigned TRISB4 :1;
unsigned TRISB5 :1;
unsigned TRISB6 :1;
unsigned TRISB7 :1;
};
} TRISBbits_t;
extern volatile TRISBbits_t TRISBbits @ 0x086;

# 1449
extern volatile unsigned char TRISC @ 0x087;

asm("TRISC equ 087h");


typedef union {
struct {
unsigned TRISC0 :1;
unsigned TRISC1 :1;
unsigned TRISC2 :1;
unsigned TRISC3 :1;
unsigned TRISC4 :1;
unsigned TRISC5 :1;
unsigned TRISC6 :1;
unsigned TRISC7 :1;
};
} TRISCbits_t;
extern volatile TRISCbits_t TRISCbits @ 0x087;

# 1510
extern volatile unsigned char TRISD @ 0x088;

asm("TRISD equ 088h");


typedef union {
struct {
unsigned TRISD0 :1;
unsigned TRISD1 :1;
unsigned TRISD2 :1;
unsigned TRISD3 :1;
unsigned TRISD4 :1;
unsigned TRISD5 :1;
unsigned TRISD6 :1;
unsigned TRISD7 :1;
};
} TRISDbits_t;
extern volatile TRISDbits_t TRISDbits @ 0x088;

# 1571
extern volatile unsigned char TRISE @ 0x089;

asm("TRISE equ 089h");


typedef union {
struct {
unsigned TRISE0 :1;
unsigned TRISE1 :1;
unsigned TRISE2 :1;
unsigned TRISE3 :1;
};
} TRISEbits_t;
extern volatile TRISEbits_t TRISEbits @ 0x089;

# 1608
extern volatile unsigned char PIE1 @ 0x08C;

asm("PIE1 equ 08Ch");


typedef union {
struct {
unsigned TMR1IE :1;
unsigned TMR2IE :1;
unsigned CCP1IE :1;
unsigned SSPIE :1;
unsigned TXIE :1;
unsigned RCIE :1;
unsigned ADIE :1;
unsigned TMR1GIE :1;
};
} PIE1bits_t;
extern volatile PIE1bits_t PIE1bits @ 0x08C;

# 1669
extern volatile unsigned char PIE2 @ 0x08D;

asm("PIE2 equ 08Dh");


typedef union {
struct {
unsigned CCP2IE :1;
};
} PIE2bits_t;
extern volatile PIE2bits_t PIE2bits @ 0x08D;

# 1688
extern volatile unsigned char PCON @ 0x08E;

asm("PCON equ 08Eh");


typedef union {
struct {
unsigned nBOR :1;
unsigned nPOR :1;
};
struct {
unsigned nBO :1;
};
} PCONbits_t;
extern volatile PCONbits_t PCONbits @ 0x08E;

# 1721
extern volatile unsigned char T1GCON @ 0x08F;

asm("T1GCON equ 08Fh");


typedef union {
struct {
unsigned T1GSS :2;
unsigned T1GVAL :1;
unsigned T1GGO_nDONE :1;
unsigned T1GSPM :1;
unsigned T1GTM :1;
unsigned T1GPOL :1;
unsigned TMR1GE :1;
};
struct {
unsigned T1GSS0 :1;
unsigned T1GSS1 :1;
unsigned :1;
unsigned T1G_nDONE :1;
};
struct {
unsigned :3;
unsigned T1GGO_DONE :1;
};
struct {
unsigned :3;
unsigned T1GGO :1;
};
} T1GCONbits_t;
extern volatile T1GCONbits_t T1GCONbits @ 0x08F;

# 1815
extern volatile unsigned char OSCCON @ 0x090;

asm("OSCCON equ 090h");


typedef union {
struct {
unsigned :2;
unsigned ICSS :1;
unsigned ICSL :1;
unsigned IRCF :2;
};
struct {
unsigned :4;
unsigned IRCF0 :1;
unsigned IRCF1 :1;
};
} OSCCONbits_t;
extern volatile OSCCONbits_t OSCCONbits @ 0x090;

# 1862
extern volatile unsigned char OSCTUNE @ 0x091;

asm("OSCTUNE equ 091h");


typedef union {
struct {
unsigned TUN :6;
};
struct {
unsigned TUN0 :1;
unsigned TUN1 :1;
unsigned TUN2 :1;
unsigned TUN3 :1;
unsigned TUN4 :1;
unsigned TUN5 :1;
};
} OSCTUNEbits_t;
extern volatile OSCTUNEbits_t OSCTUNEbits @ 0x091;

# 1919
extern volatile unsigned char PR2 @ 0x092;

asm("PR2 equ 092h");



extern volatile unsigned char SSPADD @ 0x093;

asm("SSPADD equ 093h");



extern volatile unsigned char SSPMSK @ 0x093;

asm("SSPMSK equ 093h");



extern volatile unsigned char SSPSTAT @ 0x094;

asm("SSPSTAT equ 094h");


typedef union {
struct {
unsigned BF :1;
unsigned UA :1;
unsigned R_nW :1;
unsigned S :1;
unsigned P :1;
unsigned D_nA :1;
unsigned CKE :1;
unsigned SMP :1;
};
struct {
unsigned :2;
unsigned R :1;
unsigned :2;
unsigned D :1;
};
struct {
unsigned :2;
unsigned I2C_READ :1;
unsigned I2C_START :1;
unsigned I2C_STOP :1;
unsigned I2C_DATA :1;
};
struct {
unsigned :2;
unsigned nW :1;
unsigned :2;
unsigned nA :1;
};
struct {
unsigned :2;
unsigned nWRITE :1;
unsigned :2;
unsigned nADDRESS :1;
};
struct {
unsigned :2;
unsigned R_W :1;
unsigned :2;
unsigned D_A :1;
};
struct {
unsigned :2;
unsigned READ_WRITE :1;
unsigned :2;
unsigned DATA_ADDRESS :1;
};
} SSPSTATbits_t;
extern volatile SSPSTATbits_t SSPSTATbits @ 0x094;

# 2105
extern volatile unsigned char WPUB @ 0x095;

asm("WPUB equ 095h");


extern volatile unsigned char WPU @ 0x095;

asm("WPU equ 095h");


typedef union {
struct {
unsigned WPUB :8;
};
struct {
unsigned WPUB0 :1;
unsigned WPUB1 :1;
unsigned WPUB2 :1;
unsigned WPUB3 :1;
unsigned WPUB4 :1;
unsigned WPUB5 :1;
unsigned WPUB6 :1;
unsigned WPUB7 :1;
};
struct {
unsigned WPU0 :1;
unsigned WPU1 :1;
unsigned WPU2 :1;
unsigned WPU3 :1;
unsigned WPU4 :1;
unsigned WPU5 :1;
unsigned WPU6 :1;
unsigned WPU7 :1;
};
} WPUBbits_t;
extern volatile WPUBbits_t WPUBbits @ 0x095;

# 2228
typedef union {
struct {
unsigned WPUB :8;
};
struct {
unsigned WPUB0 :1;
unsigned WPUB1 :1;
unsigned WPUB2 :1;
unsigned WPUB3 :1;
unsigned WPUB4 :1;
unsigned WPUB5 :1;
unsigned WPUB6 :1;
unsigned WPUB7 :1;
};
struct {
unsigned WPU0 :1;
unsigned WPU1 :1;
unsigned WPU2 :1;
unsigned WPU3 :1;
unsigned WPU4 :1;
unsigned WPU5 :1;
unsigned WPU6 :1;
unsigned WPU7 :1;
};
} WPUbits_t;
extern volatile WPUbits_t WPUbits @ 0x095;

# 2342
extern volatile unsigned char IOCB @ 0x096;

asm("IOCB equ 096h");


extern volatile unsigned char IOC @ 0x096;

asm("IOC equ 096h");


typedef union {
struct {
unsigned IOCB :8;
};
struct {
unsigned IOCB0 :1;
unsigned IOCB1 :1;
unsigned IOCB2 :1;
unsigned IOCB3 :1;
unsigned IOCB4 :1;
unsigned IOCB5 :1;
unsigned IOCB6 :1;
unsigned IOCB7 :1;
};
struct {
unsigned IOC0 :1;
unsigned IOC1 :1;
unsigned IOC2 :1;
unsigned IOC3 :1;
unsigned IOC4 :1;
unsigned IOC5 :1;
unsigned IOC6 :1;
unsigned IOC7 :1;
};
} IOCBbits_t;
extern volatile IOCBbits_t IOCBbits @ 0x096;

# 2465
typedef union {
struct {
unsigned IOCB :8;
};
struct {
unsigned IOCB0 :1;
unsigned IOCB1 :1;
unsigned IOCB2 :1;
unsigned IOCB3 :1;
unsigned IOCB4 :1;
unsigned IOCB5 :1;
unsigned IOCB6 :1;
unsigned IOCB7 :1;
};
struct {
unsigned IOC0 :1;
unsigned IOC1 :1;
unsigned IOC2 :1;
unsigned IOC3 :1;
unsigned IOC4 :1;
unsigned IOC5 :1;
unsigned IOC6 :1;
unsigned IOC7 :1;
};
} IOCbits_t;
extern volatile IOCbits_t IOCbits @ 0x096;

# 2579
extern volatile unsigned char TXSTA @ 0x098;

asm("TXSTA equ 098h");


typedef union {
struct {
unsigned TX9D :1;
unsigned TRMT :1;
unsigned BRGH :1;
unsigned :1;
unsigned SYNC :1;
unsigned TXEN :1;
unsigned TX9 :1;
unsigned CSRC :1;
};
struct {
unsigned TXD8 :1;
unsigned :5;
unsigned nTX8 :1;
};
struct {
unsigned :6;
unsigned TX8_9 :1;
};
} TXSTAbits_t;
extern volatile TXSTAbits_t TXSTAbits @ 0x098;

# 2659
extern volatile unsigned char SPBRG @ 0x099;

asm("SPBRG equ 099h");



extern volatile unsigned char APFCON @ 0x09C;

asm("APFCON equ 09Ch");


typedef union {
struct {
unsigned CCP2SEL :1;
unsigned SSSEL :1;
};
} APFCONbits_t;
extern volatile APFCONbits_t APFCONbits @ 0x09C;

# 2690
extern volatile unsigned char FVRCON @ 0x09D;

asm("FVRCON equ 09Dh");


typedef union {
struct {
unsigned ADFVR0 :1;
unsigned ADFVR1 :1;
unsigned :4;
unsigned FVREN :1;
unsigned FVRRDY :1;
};
struct {
unsigned :7;
unsigned FVRST :1;
};
} FVRCONbits_t;
extern volatile FVRCONbits_t FVRCONbits @ 0x09D;

# 2737
extern volatile unsigned char ADCON1 @ 0x09F;

asm("ADCON1 equ 09Fh");


typedef union {
struct {
unsigned ADREF :2;
unsigned :2;
unsigned ADCS :3;
};
struct {
unsigned ADREF0 :1;
unsigned ADREF1 :1;
unsigned :2;
unsigned ADCS0 :1;
unsigned ADCS1 :1;
unsigned ADCS2 :1;
};
} ADCON1bits_t;
extern volatile ADCON1bits_t ADCON1bits @ 0x09F;

# 2796
extern volatile unsigned char CPSCON0 @ 0x108;

asm("CPSCON0 equ 0108h");


typedef union {
struct {
unsigned T0XCS :1;
unsigned CPSOUT :1;
unsigned CPSRNG :2;
unsigned :3;
unsigned CPSON :1;
};
struct {
unsigned :2;
unsigned CPSRNG0 :1;
unsigned CPSRNG1 :1;
};
} CPSCON0bits_t;
extern volatile CPSCON0bits_t CPSCON0bits @ 0x108;

# 2849
extern volatile unsigned char CPSCON1 @ 0x109;

asm("CPSCON1 equ 0109h");


typedef union {
struct {
unsigned CPSCH :4;
};
struct {
unsigned CPSCH0 :1;
unsigned CPSCH1 :1;
unsigned CPSCH2 :1;
unsigned CPSCH3 :1;
};
} CPSCON1bits_t;
extern volatile CPSCON1bits_t CPSCON1bits @ 0x109;

# 2894
extern volatile unsigned char PMDATL @ 0x10C;

asm("PMDATL equ 010Ch");


extern volatile unsigned char PMDATA @ 0x10C;

asm("PMDATA equ 010Ch");



extern volatile unsigned char PMADRL @ 0x10D;

asm("PMADRL equ 010Dh");


extern volatile unsigned char PMADR @ 0x10D;

asm("PMADR equ 010Dh");



extern volatile unsigned char PMDATH @ 0x10E;

asm("PMDATH equ 010Eh");



extern volatile unsigned char PMADRH @ 0x10F;

asm("PMADRH equ 010Fh");



extern volatile unsigned char ANSELA @ 0x185;

asm("ANSELA equ 0185h");


typedef union {
struct {
unsigned ANSA :6;
};
struct {
unsigned ANSA0 :1;
unsigned ANSA1 :1;
unsigned ANSA2 :1;
unsigned ANSA3 :1;
unsigned ANSA4 :1;
unsigned ANSA5 :1;
};
} ANSELAbits_t;
extern volatile ANSELAbits_t ANSELAbits @ 0x185;

# 2985
extern volatile unsigned char ANSELB @ 0x186;

asm("ANSELB equ 0186h");


typedef union {
struct {
unsigned ANSB :6;
};
struct {
unsigned ANSB0 :1;
unsigned ANSB1 :1;
unsigned ANSB2 :1;
unsigned ANSB3 :1;
unsigned ANSB4 :1;
unsigned ANSB5 :1;
};
} ANSELBbits_t;
extern volatile ANSELBbits_t ANSELBbits @ 0x186;

# 3042
extern volatile unsigned char ANSELD @ 0x188;

asm("ANSELD equ 0188h");


typedef union {
struct {
unsigned ANSD :8;
};
struct {
unsigned ANSD0 :1;
unsigned ANSD1 :1;
unsigned ANSD2 :1;
unsigned ANSD3 :1;
unsigned ANSD4 :1;
unsigned ANSD5 :1;
unsigned ANSD6 :1;
unsigned ANSD7 :1;
};
} ANSELDbits_t;
extern volatile ANSELDbits_t ANSELDbits @ 0x188;

# 3111
extern volatile unsigned char ANSELE @ 0x189;

asm("ANSELE equ 0189h");


typedef union {
struct {
unsigned ANSE :3;
};
struct {
unsigned ANSE0 :1;
unsigned ANSE1 :1;
unsigned ANSE2 :1;
};
} ANSELEbits_t;
extern volatile ANSELEbits_t ANSELEbits @ 0x189;

# 3150
extern volatile unsigned char PMCON1 @ 0x18C;

asm("PMCON1 equ 018Ch");


typedef union {
struct {
unsigned RD :1;
};
struct {
unsigned PMRD :1;
};
} PMCON1bits_t;
extern volatile PMCON1bits_t PMCON1bits @ 0x18C;

# 3183
extern volatile __bit ADCS0 @ (((unsigned) &ADCON1)*8) + 4;

extern volatile __bit ADCS1 @ (((unsigned) &ADCON1)*8) + 5;

extern volatile __bit ADCS2 @ (((unsigned) &ADCON1)*8) + 6;

extern volatile __bit ADDEN @ (((unsigned) &RCSTA)*8) + 3;

extern volatile __bit ADFVR0 @ (((unsigned) &FVRCON)*8) + 0;

extern volatile __bit ADFVR1 @ (((unsigned) &FVRCON)*8) + 1;

extern volatile __bit ADIE @ (((unsigned) &PIE1)*8) + 6;

extern volatile __bit ADIF @ (((unsigned) &PIR1)*8) + 6;

extern volatile __bit ADON @ (((unsigned) &ADCON0)*8) + 0;

extern volatile __bit ADREF0 @ (((unsigned) &ADCON1)*8) + 0;

extern volatile __bit ADREF1 @ (((unsigned) &ADCON1)*8) + 1;

extern volatile __bit ANSA0 @ (((unsigned) &ANSELA)*8) + 0;

extern volatile __bit ANSA1 @ (((unsigned) &ANSELA)*8) + 1;

extern volatile __bit ANSA2 @ (((unsigned) &ANSELA)*8) + 2;

extern volatile __bit ANSA3 @ (((unsigned) &ANSELA)*8) + 3;

extern volatile __bit ANSA4 @ (((unsigned) &ANSELA)*8) + 4;

extern volatile __bit ANSA5 @ (((unsigned) &ANSELA)*8) + 5;

extern volatile __bit ANSB0 @ (((unsigned) &ANSELB)*8) + 0;

extern volatile __bit ANSB1 @ (((unsigned) &ANSELB)*8) + 1;

extern volatile __bit ANSB2 @ (((unsigned) &ANSELB)*8) + 2;

extern volatile __bit ANSB3 @ (((unsigned) &ANSELB)*8) + 3;

extern volatile __bit ANSB4 @ (((unsigned) &ANSELB)*8) + 4;

extern volatile __bit ANSB5 @ (((unsigned) &ANSELB)*8) + 5;

extern volatile __bit ANSD0 @ (((unsigned) &ANSELD)*8) + 0;

extern volatile __bit ANSD1 @ (((unsigned) &ANSELD)*8) + 1;

extern volatile __bit ANSD2 @ (((unsigned) &ANSELD)*8) + 2;

extern volatile __bit ANSD3 @ (((unsigned) &ANSELD)*8) + 3;

extern volatile __bit ANSD4 @ (((unsigned) &ANSELD)*8) + 4;

extern volatile __bit ANSD5 @ (((unsigned) &ANSELD)*8) + 5;

extern volatile __bit ANSD6 @ (((unsigned) &ANSELD)*8) + 6;

extern volatile __bit ANSD7 @ (((unsigned) &ANSELD)*8) + 7;

extern volatile __bit ANSE0 @ (((unsigned) &ANSELE)*8) + 0;

extern volatile __bit ANSE1 @ (((unsigned) &ANSELE)*8) + 1;

extern volatile __bit ANSE2 @ (((unsigned) &ANSELE)*8) + 2;

extern volatile __bit BF @ (((unsigned) &SSPSTAT)*8) + 0;

extern volatile __bit BRGH @ (((unsigned) &TXSTA)*8) + 2;

extern volatile __bit CARRY @ (((unsigned) &STATUS)*8) + 0;

extern volatile __bit CCP1IE @ (((unsigned) &PIE1)*8) + 2;

extern volatile __bit CCP1IF @ (((unsigned) &PIR1)*8) + 2;

extern volatile __bit CCP1M0 @ (((unsigned) &CCP1CON)*8) + 0;

extern volatile __bit CCP1M1 @ (((unsigned) &CCP1CON)*8) + 1;

extern volatile __bit CCP1M2 @ (((unsigned) &CCP1CON)*8) + 2;

extern volatile __bit CCP1M3 @ (((unsigned) &CCP1CON)*8) + 3;

extern volatile __bit CCP1X @ (((unsigned) &CCP1CON)*8) + 5;

extern volatile __bit CCP1Y @ (((unsigned) &CCP1CON)*8) + 4;

extern volatile __bit CCP2IE @ (((unsigned) &PIE2)*8) + 0;

extern volatile __bit CCP2IF @ (((unsigned) &PIR2)*8) + 0;

extern volatile __bit CCP2M0 @ (((unsigned) &CCP2CON)*8) + 0;

extern volatile __bit CCP2M1 @ (((unsigned) &CCP2CON)*8) + 1;

extern volatile __bit CCP2M2 @ (((unsigned) &CCP2CON)*8) + 2;

extern volatile __bit CCP2M3 @ (((unsigned) &CCP2CON)*8) + 3;

extern volatile __bit CCP2SEL @ (((unsigned) &APFCON)*8) + 0;

extern volatile __bit CCP2X @ (((unsigned) &CCP2CON)*8) + 5;

extern volatile __bit CCP2Y @ (((unsigned) &CCP2CON)*8) + 4;

extern volatile __bit CHS0 @ (((unsigned) &ADCON0)*8) + 2;

extern volatile __bit CHS1 @ (((unsigned) &ADCON0)*8) + 3;

extern volatile __bit CHS2 @ (((unsigned) &ADCON0)*8) + 4;

extern volatile __bit CHS3 @ (((unsigned) &ADCON0)*8) + 5;

extern volatile __bit CKE @ (((unsigned) &SSPSTAT)*8) + 6;

extern volatile __bit CKP @ (((unsigned) &SSPCON)*8) + 4;

extern volatile __bit CPSCH0 @ (((unsigned) &CPSCON1)*8) + 0;

extern volatile __bit CPSCH1 @ (((unsigned) &CPSCON1)*8) + 1;

extern volatile __bit CPSCH2 @ (((unsigned) &CPSCON1)*8) + 2;

extern volatile __bit CPSCH3 @ (((unsigned) &CPSCON1)*8) + 3;

extern volatile __bit CPSON @ (((unsigned) &CPSCON0)*8) + 7;

extern volatile __bit CPSOUT @ (((unsigned) &CPSCON0)*8) + 1;

extern volatile __bit CPSRNG0 @ (((unsigned) &CPSCON0)*8) + 2;

extern volatile __bit CPSRNG1 @ (((unsigned) &CPSCON0)*8) + 3;

extern volatile __bit CREN @ (((unsigned) &RCSTA)*8) + 4;

extern volatile __bit CSRC @ (((unsigned) &TXSTA)*8) + 7;

extern volatile __bit DATA_ADDRESS @ (((unsigned) &SSPSTAT)*8) + 5;

extern volatile __bit DC @ (((unsigned) &STATUS)*8) + 1;

extern volatile __bit DC1B0 @ (((unsigned) &CCP1CON)*8) + 4;

extern volatile __bit DC1B1 @ (((unsigned) &CCP1CON)*8) + 5;

extern volatile __bit DC2B0 @ (((unsigned) &CCP2CON)*8) + 4;

extern volatile __bit DC2B1 @ (((unsigned) &CCP2CON)*8) + 5;

extern volatile __bit D_A @ (((unsigned) &SSPSTAT)*8) + 5;

extern volatile __bit D_nA @ (((unsigned) &SSPSTAT)*8) + 5;

extern volatile __bit FERR @ (((unsigned) &RCSTA)*8) + 2;

extern volatile __bit FVREN @ (((unsigned) &FVRCON)*8) + 6;

extern volatile __bit FVRRDY @ (((unsigned) &FVRCON)*8) + 7;

extern volatile __bit FVRST @ (((unsigned) &FVRCON)*8) + 7;

extern volatile __bit GIE @ (((unsigned) &INTCON)*8) + 7;

extern volatile __bit GO @ (((unsigned) &ADCON0)*8) + 1;

extern volatile __bit GO_DONE @ (((unsigned) &ADCON0)*8) + 1;

extern volatile __bit GO_nDONE @ (((unsigned) &ADCON0)*8) + 1;

extern volatile __bit I2C_DATA @ (((unsigned) &SSPSTAT)*8) + 5;

extern volatile __bit I2C_READ @ (((unsigned) &SSPSTAT)*8) + 2;

extern volatile __bit I2C_START @ (((unsigned) &SSPSTAT)*8) + 3;

extern volatile __bit I2C_STOP @ (((unsigned) &SSPSTAT)*8) + 4;

extern volatile __bit ICSL @ (((unsigned) &OSCCON)*8) + 3;

extern volatile __bit ICSS @ (((unsigned) &OSCCON)*8) + 2;

extern volatile __bit INTE @ (((unsigned) &INTCON)*8) + 4;

extern volatile __bit INTEDG @ (((unsigned) &OPTION_REG)*8) + 6;

extern volatile __bit INTF @ (((unsigned) &INTCON)*8) + 1;

extern volatile __bit IOC0 @ (((unsigned) &IOCB)*8) + 0;

extern volatile __bit IOC1 @ (((unsigned) &IOCB)*8) + 1;

extern volatile __bit IOC2 @ (((unsigned) &IOCB)*8) + 2;

extern volatile __bit IOC3 @ (((unsigned) &IOCB)*8) + 3;

extern volatile __bit IOC4 @ (((unsigned) &IOCB)*8) + 4;

extern volatile __bit IOC5 @ (((unsigned) &IOCB)*8) + 5;

extern volatile __bit IOC6 @ (((unsigned) &IOCB)*8) + 6;

extern volatile __bit IOC7 @ (((unsigned) &IOCB)*8) + 7;

extern volatile __bit IOCB0 @ (((unsigned) &IOCB)*8) + 0;

extern volatile __bit IOCB1 @ (((unsigned) &IOCB)*8) + 1;

extern volatile __bit IOCB2 @ (((unsigned) &IOCB)*8) + 2;

extern volatile __bit IOCB3 @ (((unsigned) &IOCB)*8) + 3;

extern volatile __bit IOCB4 @ (((unsigned) &IOCB)*8) + 4;

extern volatile __bit IOCB5 @ (((unsigned) &IOCB)*8) + 5;

extern volatile __bit IOCB6 @ (((unsigned) &IOCB)*8) + 6;

extern volatile __bit IOCB7 @ (((unsigned) &IOCB)*8) + 7;

extern volatile __bit IOCIE @ (((unsigned) &INTCON)*8) + 3;

extern volatile __bit IOCIF @ (((unsigned) &INTCON)*8) + 0;

extern volatile __bit IRCF0 @ (((unsigned) &OSCCON)*8) + 4;

extern volatile __bit IRCF1 @ (((unsigned) &OSCCON)*8) + 5;

extern volatile __bit IRP @ (((unsigned) &STATUS)*8) + 7;

extern volatile __bit OERR @ (((unsigned) &RCSTA)*8) + 1;

extern volatile __bit PEIE @ (((unsigned) &INTCON)*8) + 6;

extern volatile __bit PMRD @ (((unsigned) &PMCON1)*8) + 0;

extern volatile __bit PS0 @ (((unsigned) &OPTION_REG)*8) + 0;

extern volatile __bit PS1 @ (((unsigned) &OPTION_REG)*8) + 1;

extern volatile __bit PS2 @ (((unsigned) &OPTION_REG)*8) + 2;

extern volatile __bit PSA @ (((unsigned) &OPTION_REG)*8) + 3;

extern volatile __bit RA0 @ (((unsigned) &PORTA)*8) + 0;

extern volatile __bit RA1 @ (((unsigned) &PORTA)*8) + 1;

extern volatile __bit RA2 @ (((unsigned) &PORTA)*8) + 2;

extern volatile __bit RA3 @ (((unsigned) &PORTA)*8) + 3;

extern volatile __bit RA4 @ (((unsigned) &PORTA)*8) + 4;

extern volatile __bit RA5 @ (((unsigned) &PORTA)*8) + 5;

extern volatile __bit RA6 @ (((unsigned) &PORTA)*8) + 6;

extern volatile __bit RA7 @ (((unsigned) &PORTA)*8) + 7;

extern volatile __bit RB0 @ (((unsigned) &PORTB)*8) + 0;

extern volatile __bit RB1 @ (((unsigned) &PORTB)*8) + 1;

extern volatile __bit RB2 @ (((unsigned) &PORTB)*8) + 2;

extern volatile __bit RB3 @ (((unsigned) &PORTB)*8) + 3;

extern volatile __bit RB4 @ (((unsigned) &PORTB)*8) + 4;

extern volatile __bit RB5 @ (((unsigned) &PORTB)*8) + 5;

extern volatile __bit RB6 @ (((unsigned) &PORTB)*8) + 6;

extern volatile __bit RB7 @ (((unsigned) &PORTB)*8) + 7;

extern volatile __bit RBIE @ (((unsigned) &INTCON)*8) + 3;

extern volatile __bit RBIF @ (((unsigned) &INTCON)*8) + 0;

extern volatile __bit RC0 @ (((unsigned) &PORTC)*8) + 0;

extern volatile __bit RC1 @ (((unsigned) &PORTC)*8) + 1;

extern volatile __bit RC2 @ (((unsigned) &PORTC)*8) + 2;

extern volatile __bit RC3 @ (((unsigned) &PORTC)*8) + 3;

extern volatile __bit RC4 @ (((unsigned) &PORTC)*8) + 4;

extern volatile __bit RC5 @ (((unsigned) &PORTC)*8) + 5;

extern volatile __bit RC6 @ (((unsigned) &PORTC)*8) + 6;

extern volatile __bit RC7 @ (((unsigned) &PORTC)*8) + 7;

extern volatile __bit RC8_9 @ (((unsigned) &RCSTA)*8) + 6;

extern volatile __bit RC9 @ (((unsigned) &RCSTA)*8) + 6;

extern volatile __bit RCD8 @ (((unsigned) &RCSTA)*8) + 0;

extern volatile __bit RCIE @ (((unsigned) &PIE1)*8) + 5;

extern volatile __bit RCIF @ (((unsigned) &PIR1)*8) + 5;

extern volatile __bit RD @ (((unsigned) &PMCON1)*8) + 0;

extern volatile __bit RD0 @ (((unsigned) &PORTD)*8) + 0;

extern volatile __bit RD1 @ (((unsigned) &PORTD)*8) + 1;

extern volatile __bit RD2 @ (((unsigned) &PORTD)*8) + 2;

extern volatile __bit RD3 @ (((unsigned) &PORTD)*8) + 3;

extern volatile __bit RD4 @ (((unsigned) &PORTD)*8) + 4;

extern volatile __bit RD5 @ (((unsigned) &PORTD)*8) + 5;

extern volatile __bit RD6 @ (((unsigned) &PORTD)*8) + 6;

extern volatile __bit RD7 @ (((unsigned) &PORTD)*8) + 7;

extern volatile __bit RE0 @ (((unsigned) &PORTE)*8) + 0;

extern volatile __bit RE1 @ (((unsigned) &PORTE)*8) + 1;

extern volatile __bit RE2 @ (((unsigned) &PORTE)*8) + 2;

extern volatile __bit RE3 @ (((unsigned) &PORTE)*8) + 3;

extern volatile __bit READ_WRITE @ (((unsigned) &SSPSTAT)*8) + 2;

extern volatile __bit RP0 @ (((unsigned) &STATUS)*8) + 5;

extern volatile __bit RP1 @ (((unsigned) &STATUS)*8) + 6;

extern volatile __bit RX9 @ (((unsigned) &RCSTA)*8) + 6;

extern volatile __bit RX9D @ (((unsigned) &RCSTA)*8) + 0;

extern volatile __bit R_W @ (((unsigned) &SSPSTAT)*8) + 2;

extern volatile __bit R_nW @ (((unsigned) &SSPSTAT)*8) + 2;

extern volatile __bit SMP @ (((unsigned) &SSPSTAT)*8) + 7;

extern volatile __bit SPEN @ (((unsigned) &RCSTA)*8) + 7;

extern volatile __bit SREN @ (((unsigned) &RCSTA)*8) + 5;

extern volatile __bit SSPEN @ (((unsigned) &SSPCON)*8) + 5;

extern volatile __bit SSPIE @ (((unsigned) &PIE1)*8) + 3;

extern volatile __bit SSPIF @ (((unsigned) &PIR1)*8) + 3;

extern volatile __bit SSPM0 @ (((unsigned) &SSPCON)*8) + 0;

extern volatile __bit SSPM1 @ (((unsigned) &SSPCON)*8) + 1;

extern volatile __bit SSPM2 @ (((unsigned) &SSPCON)*8) + 2;

extern volatile __bit SSPM3 @ (((unsigned) &SSPCON)*8) + 3;

extern volatile __bit SSPOV @ (((unsigned) &SSPCON)*8) + 6;

extern volatile __bit SSSEL @ (((unsigned) &APFCON)*8) + 1;

extern volatile __bit SYNC @ (((unsigned) &TXSTA)*8) + 4;

extern volatile __bit T0CS @ (((unsigned) &OPTION_REG)*8) + 5;

extern volatile __bit T0IE @ (((unsigned) &INTCON)*8) + 5;

extern volatile __bit T0IF @ (((unsigned) &INTCON)*8) + 2;

extern volatile __bit T0SE @ (((unsigned) &OPTION_REG)*8) + 4;

extern volatile __bit T0XCS @ (((unsigned) &CPSCON0)*8) + 0;

extern volatile __bit T1CKPS0 @ (((unsigned) &T1CON)*8) + 4;

extern volatile __bit T1CKPS1 @ (((unsigned) &T1CON)*8) + 5;

extern volatile __bit T1GGO @ (((unsigned) &T1GCON)*8) + 3;

extern volatile __bit T1GGO_DONE @ (((unsigned) &T1GCON)*8) + 3;

extern volatile __bit T1GGO_nDONE @ (((unsigned) &T1GCON)*8) + 3;

extern volatile __bit T1GPOL @ (((unsigned) &T1GCON)*8) + 6;

extern volatile __bit T1GSPM @ (((unsigned) &T1GCON)*8) + 4;

extern volatile __bit T1GSS0 @ (((unsigned) &T1GCON)*8) + 0;

extern volatile __bit T1GSS1 @ (((unsigned) &T1GCON)*8) + 1;

extern volatile __bit T1GTM @ (((unsigned) &T1GCON)*8) + 5;

extern volatile __bit T1GVAL @ (((unsigned) &T1GCON)*8) + 2;

extern volatile __bit T1G_nDONE @ (((unsigned) &T1GCON)*8) + 3;

extern volatile __bit T1INSYNC @ (((unsigned) &T1CON)*8) + 2;

extern volatile __bit T1OSCEN @ (((unsigned) &T1CON)*8) + 3;

extern volatile __bit T1SYNC @ (((unsigned) &T1CON)*8) + 2;

extern volatile __bit T2CKPS0 @ (((unsigned) &T2CON)*8) + 0;

extern volatile __bit T2CKPS1 @ (((unsigned) &T2CON)*8) + 1;

extern volatile __bit TMR0IE @ (((unsigned) &INTCON)*8) + 5;

extern volatile __bit TMR0IF @ (((unsigned) &INTCON)*8) + 2;

extern volatile __bit TMR1CS0 @ (((unsigned) &T1CON)*8) + 6;

extern volatile __bit TMR1CS1 @ (((unsigned) &T1CON)*8) + 7;

extern volatile __bit TMR1GE @ (((unsigned) &T1GCON)*8) + 7;

extern volatile __bit TMR1GIE @ (((unsigned) &PIE1)*8) + 7;

extern volatile __bit TMR1GIF @ (((unsigned) &PIR1)*8) + 7;

extern volatile __bit TMR1IE @ (((unsigned) &PIE1)*8) + 0;

extern volatile __bit TMR1IF @ (((unsigned) &PIR1)*8) + 0;

extern volatile __bit TMR1ON @ (((unsigned) &T1CON)*8) + 0;

extern volatile __bit TMR2IE @ (((unsigned) &PIE1)*8) + 1;

extern volatile __bit TMR2IF @ (((unsigned) &PIR1)*8) + 1;

extern volatile __bit TMR2ON @ (((unsigned) &T2CON)*8) + 2;

extern volatile __bit TOUTPS0 @ (((unsigned) &T2CON)*8) + 3;

extern volatile __bit TOUTPS1 @ (((unsigned) &T2CON)*8) + 4;

extern volatile __bit TOUTPS2 @ (((unsigned) &T2CON)*8) + 5;

extern volatile __bit TOUTPS3 @ (((unsigned) &T2CON)*8) + 6;

extern volatile __bit TRISA0 @ (((unsigned) &TRISA)*8) + 0;

extern volatile __bit TRISA1 @ (((unsigned) &TRISA)*8) + 1;

extern volatile __bit TRISA2 @ (((unsigned) &TRISA)*8) + 2;

extern volatile __bit TRISA3 @ (((unsigned) &TRISA)*8) + 3;

extern volatile __bit TRISA4 @ (((unsigned) &TRISA)*8) + 4;

extern volatile __bit TRISA5 @ (((unsigned) &TRISA)*8) + 5;

extern volatile __bit TRISA6 @ (((unsigned) &TRISA)*8) + 6;

extern volatile __bit TRISA7 @ (((unsigned) &TRISA)*8) + 7;

extern volatile __bit TRISB0 @ (((unsigned) &TRISB)*8) + 0;

extern volatile __bit TRISB1 @ (((unsigned) &TRISB)*8) + 1;

extern volatile __bit TRISB2 @ (((unsigned) &TRISB)*8) + 2;

extern volatile __bit TRISB3 @ (((unsigned) &TRISB)*8) + 3;

extern volatile __bit TRISB4 @ (((unsigned) &TRISB)*8) + 4;

extern volatile __bit TRISB5 @ (((unsigned) &TRISB)*8) + 5;

extern volatile __bit TRISB6 @ (((unsigned) &TRISB)*8) + 6;

extern volatile __bit TRISB7 @ (((unsigned) &TRISB)*8) + 7;

extern volatile __bit TRISC0 @ (((unsigned) &TRISC)*8) + 0;

extern volatile __bit TRISC1 @ (((unsigned) &TRISC)*8) + 1;

extern volatile __bit TRISC2 @ (((unsigned) &TRISC)*8) + 2;

extern volatile __bit TRISC3 @ (((unsigned) &TRISC)*8) + 3;

extern volatile __bit TRISC4 @ (((unsigned) &TRISC)*8) + 4;

extern volatile __bit TRISC5 @ (((unsigned) &TRISC)*8) + 5;

extern volatile __bit TRISC6 @ (((unsigned) &TRISC)*8) + 6;

extern volatile __bit TRISC7 @ (((unsigned) &TRISC)*8) + 7;

extern volatile __bit TRISD0 @ (((unsigned) &TRISD)*8) + 0;

extern volatile __bit TRISD1 @ (((unsigned) &TRISD)*8) + 1;

extern volatile __bit TRISD2 @ (((unsigned) &TRISD)*8) + 2;

extern volatile __bit TRISD3 @ (((unsigned) &TRISD)*8) + 3;

extern volatile __bit TRISD4 @ (((unsigned) &TRISD)*8) + 4;

extern volatile __bit TRISD5 @ (((unsigned) &TRISD)*8) + 5;

extern volatile __bit TRISD6 @ (((unsigned) &TRISD)*8) + 6;

extern volatile __bit TRISD7 @ (((unsigned) &TRISD)*8) + 7;

extern volatile __bit TRISE0 @ (((unsigned) &TRISE)*8) + 0;

extern volatile __bit TRISE1 @ (((unsigned) &TRISE)*8) + 1;

extern volatile __bit TRISE2 @ (((unsigned) &TRISE)*8) + 2;

extern volatile __bit TRISE3 @ (((unsigned) &TRISE)*8) + 3;

extern volatile __bit TRMT @ (((unsigned) &TXSTA)*8) + 1;

extern volatile __bit TUN0 @ (((unsigned) &OSCTUNE)*8) + 0;

extern volatile __bit TUN1 @ (((unsigned) &OSCTUNE)*8) + 1;

extern volatile __bit TUN2 @ (((unsigned) &OSCTUNE)*8) + 2;

extern volatile __bit TUN3 @ (((unsigned) &OSCTUNE)*8) + 3;

extern volatile __bit TUN4 @ (((unsigned) &OSCTUNE)*8) + 4;

extern volatile __bit TUN5 @ (((unsigned) &OSCTUNE)*8) + 5;

extern volatile __bit TX8_9 @ (((unsigned) &TXSTA)*8) + 6;

extern volatile __bit TX9 @ (((unsigned) &TXSTA)*8) + 6;

extern volatile __bit TX9D @ (((unsigned) &TXSTA)*8) + 0;

extern volatile __bit TXD8 @ (((unsigned) &TXSTA)*8) + 0;

extern volatile __bit TXEN @ (((unsigned) &TXSTA)*8) + 5;

extern volatile __bit TXIE @ (((unsigned) &PIE1)*8) + 4;

extern volatile __bit TXIF @ (((unsigned) &PIR1)*8) + 4;

extern volatile __bit UA @ (((unsigned) &SSPSTAT)*8) + 1;

extern volatile __bit WCOL @ (((unsigned) &SSPCON)*8) + 7;

extern volatile __bit WPU0 @ (((unsigned) &WPUB)*8) + 0;

extern volatile __bit WPU1 @ (((unsigned) &WPUB)*8) + 1;

extern volatile __bit WPU2 @ (((unsigned) &WPUB)*8) + 2;

extern volatile __bit WPU3 @ (((unsigned) &WPUB)*8) + 3;

extern volatile __bit WPU4 @ (((unsigned) &WPUB)*8) + 4;

extern volatile __bit WPU5 @ (((unsigned) &WPUB)*8) + 5;

extern volatile __bit WPU6 @ (((unsigned) &WPUB)*8) + 6;

extern volatile __bit WPU7 @ (((unsigned) &WPUB)*8) + 7;

extern volatile __bit WPUB0 @ (((unsigned) &WPUB)*8) + 0;

extern volatile __bit WPUB1 @ (((unsigned) &WPUB)*8) + 1;

extern volatile __bit WPUB2 @ (((unsigned) &WPUB)*8) + 2;

extern volatile __bit WPUB3 @ (((unsigned) &WPUB)*8) + 3;

extern volatile __bit WPUB4 @ (((unsigned) &WPUB)*8) + 4;

extern volatile __bit WPUB5 @ (((unsigned) &WPUB)*8) + 5;

extern volatile __bit WPUB6 @ (((unsigned) &WPUB)*8) + 6;

extern volatile __bit WPUB7 @ (((unsigned) &WPUB)*8) + 7;

extern volatile __bit ZERO @ (((unsigned) &STATUS)*8) + 2;

extern volatile __bit nA @ (((unsigned) &SSPSTAT)*8) + 5;

extern volatile __bit nADDRESS @ (((unsigned) &SSPSTAT)*8) + 5;

extern volatile __bit nBO @ (((unsigned) &PCON)*8) + 0;

extern volatile __bit nBOR @ (((unsigned) &PCON)*8) + 0;

extern volatile __bit nDONE @ (((unsigned) &ADCON0)*8) + 1;

extern volatile __bit nPD @ (((unsigned) &STATUS)*8) + 3;

extern volatile __bit nPOR @ (((unsigned) &PCON)*8) + 1;

extern volatile __bit nRBPU @ (((unsigned) &OPTION_REG)*8) + 7;

extern volatile __bit nRC8 @ (((unsigned) &RCSTA)*8) + 6;

extern volatile __bit nT1SYNC @ (((unsigned) &T1CON)*8) + 2;

extern volatile __bit nTO @ (((unsigned) &STATUS)*8) + 4;

extern volatile __bit nTX8 @ (((unsigned) &TXSTA)*8) + 6;

extern volatile __bit nW @ (((unsigned) &SSPSTAT)*8) + 2;

extern volatile __bit nWRITE @ (((unsigned) &SSPSTAT)*8) + 2;


# 27 "C:\Program Files (x86)\Microchip\xc8\v1.34\include\pic.h"
#pragma intrinsic(__nop)
extern void __nop(void);

# 76
extern unsigned int flash_read(unsigned short addr);


# 149
#pragma intrinsic(_delay)
extern __nonreentrant void _delay(unsigned long);

# 184
extern unsigned char __resetbits;
extern __bit __powerdown;
extern __bit __timeout;


# 15 "../../Source file/PR28.h"
#pragma config FOSC = INTOSCIO
#pragma config WDTE = OFF
#pragma config PWRTE = ON
#pragma config MCLRE = ON
#pragma config CP = OFF
#pragma config BOREN = OFF
#pragma config BORV = 19
#pragma config PLLEN = ON


#pragma config VCAPEN = DIS

# 42
typedef struct {
char BTN0 ;
char BTN1 ;
char BTN2 ;
char BTN3 ;
char BTN4 ;
char BTN5 ;
char BTN6 ;
char BTN7 ;
char BTN8 ;

} BButtons;



typedef struct {
char SSPBF : 1;
} FFlags;

# 25 "../../Source file/PR28.c"
unsigned int reading[9];
unsigned int average[9];
unsigned int threshold;
unsigned char index;
unsigned int threshold4;
FFlags Flags;
BButtons Buttons;
unsigned int bigval;
unsigned int smallavg;
unsigned char result;
unsigned char result1[3];
unsigned char flag;
char data;
unsigned char matrix[3][3];

# 45
void Init(void);
void RestartTimers(void);
void RestartTimer1(void);
void SetNextChannel(void);
void CapInit(void);
void DisplayLEDs(void);
void interrupt isr(void);
void SLEEP_NOP(void);
void led_display1(unsigned char value1);
void led_display2(unsigned char value2);
void led_display3(unsigned char value3);
void delay(unsigned long data);
void send_config(unsigned char data);
void send_char(unsigned char data);
void lcd_goto(unsigned char data);
void lcd_clr(void);
void lcd_shift(void);
void send_string(const char *s);
void e_pulse(void);
void draw(void);
void led_off (void);
void GetReading(void);
void PIEZO(void);
void PIEZO_D(void);
void PIEZO_S(void);
void store(void);
void player_1(void);
void player_2(void);
void checkflag(void);
char winlose(void);
void checkstatus(void);

# 86
void main(void) {

Init();


send_config(0b00000001);
send_config(0b00000010);
send_config(0b00000110);
send_config(0b00001100);
send_config(0b00111000);
lcd_clr();
lcd_goto(0);
send_string("Cytron Technologies Sdn Bhd   ");
lcd_goto(20);
send_string("PR 28 - mTouch with Tic Tac Toe");
delay(10000);
for (int i = 0; i <15 ; i++)
{
lcd_shift();
}
delay(30000);
lcd_clr();
lcd_goto(0);
send_string("Player 1 = red");
lcd_goto(20);
send_string("Player 2 = green");
delay(60000);
lcd_clr();
lcd_goto(0);
send_string("Player 1 starts");
lcd_goto(20);
send_string("first");
delay(30000);

Buttons.BTN0 = Buttons.BTN1 = Buttons.BTN2 = Buttons.BTN3 = 0;
Buttons.BTN4 = Buttons.BTN5 = Buttons.BTN6 = Buttons.BTN7 = 0;
Buttons.BTN8 = 0;


PIEZO_S();
while (data == ' ')
{
if( flag == 0)
{
lcd_clr();
lcd_goto(0);
send_string("Player 1's turn");
}else
{
lcd_clr();
lcd_goto(0);
send_string("Player 2's turn");
}
checkflag();
data = winlose();
}
if(data =='X'){
PIEZO();
lcd_clr();
lcd_goto(0);
send_string("congratulation! ");
lcd_goto(20);
send_string("**player1 wins**");
}
if(data == 'O'){
PIEZO();
lcd_clr();
lcd_goto(0);
send_string("congratulation! ");
lcd_goto(20);
send_string("**player2 wins**");
}while(data == 'd'){
PIEZO_D();
while(1){
draw();
lcd_clr();
lcd_goto(0);
send_string("congratulation! ");
lcd_goto(20);
send_string("***draw***");
}
}
while(1){}
}

# 177
void Init(void)
{

# 193
TRISA = 0b00010000;
TRISB = 0b00000000;
TRISC = 0b00000000;
TRISD = 0b11111111;
TRISE = 0b00000000;
PORTB = 0;
PORTE = 0;

led_off();

ANSELA = 0x10;
ANSELB = 0x00;
ANSELE = 0x00;
ANSELD = 0b11111111;

result = 0;
flag = 0;
index =0;
OSCCON = 0x10;

# 220
GIE = 1;
CPSCON0 = 0b10001101;
CPSCON1 = 0b00001000;
CapInit();
data = winlose();
PEIE = 1;
}

# 235
void CapInit(void)
{


for (index=0; index<9; index++) {
average[index] = 0;
reading[index] = 0;
}
for(int i=0; i<3; i++){
for(int j=0; j<3; j++){
matrix[i][j] = ' ';
}
}

# 253
T2CON = 0b01110110;
PR2 = 0xB4;
TMR2IF = 0;
TMR2IE = 1;
T1CON = 0b11000101;
T1GCON = 0b11100010;
TMR1GIF = 0;
TMR1GIE = 1;

}

# 271
void interrupt isr(void)
{

while (TMR1GIF )
{

TMR2ON =0;
TMR1ON = 0;
TMR1GIF = 0;

GetReading();
}
}

# 291
void checkflag(void)
{
switch(flag){
case 0: player_1(); break;
case 1: player_2(); break;
default: break;
}
}

# 305
void player_1(void)
{
while(flag == 0){
checkstatus();
}

}

# 318
void player_2(void)
{
while (flag == 1){
checkstatus();
}
}

# 331
void store(void)
{
if (flag ==0){
if(Buttons.BTN0 == 1) { matrix[0][0] = 'X';}
if(Buttons.BTN1 == 1) { matrix[0][1] = 'X';}
if(Buttons.BTN2 == 1) { matrix[0][2] = 'X';}
if(Buttons.BTN3 == 1) { matrix[1][0] = 'X';}
if(Buttons.BTN4 == 1) { matrix[1][1] = 'X';}
if(Buttons.BTN5 == 1) { matrix[1][2] = 'X';}
if(Buttons.BTN6 == 1) { matrix[2][0] = 'X';}
if(Buttons.BTN7 == 1) { matrix[2][1] = 'X';}
if(Buttons.BTN8 == 1) { matrix[2][2] = 'X';}
}
else if(flag == 1){
if(Buttons.BTN0 == 1) { matrix[0][0] = 'O';}
if(Buttons.BTN1 == 1) { matrix[0][1] = 'O';}
if(Buttons.BTN2 == 1) { matrix[0][2] = 'O';}
if(Buttons.BTN3 == 1) { matrix[1][0] = 'O';}
if(Buttons.BTN4 == 1) { matrix[1][1] = 'O';}
if(Buttons.BTN5 == 1) { matrix[1][2] = 'O';}
if(Buttons.BTN6 == 1) { matrix[2][0] = 'O';}
if(Buttons.BTN7 == 1) { matrix[2][1] = 'O';}
if(Buttons.BTN8 == 1) { matrix[2][2] = 'O';}
}
}

# 363
void checkstatus(void){
if(Buttons.BTN0 ==1){
if (matrix[0][0] =='X' | matrix[0][0] == 'O')
{ if(flag==0){flag = 0;}
else
flag = 1;
}else {
store();
DisplayLEDs();
if(flag ==0){flag = 1;}
else
flag = 0;
}
}
if(Buttons.BTN1 ==1){
if (matrix[0][1] =='X' | matrix[0][1] == 'O')
{ if(flag==0){flag = 0;}
else
flag = 1;
}else {
store();
DisplayLEDs();
if(flag ==0){flag = 1;}
else
flag = 0;
}
}
if(Buttons.BTN2 ==1){
if (matrix[0][2] =='X' | matrix[0][2] == 'O')
{ if(flag==0){flag = 0;}
else
flag = 1;
}else {
store();
DisplayLEDs();
if(flag ==0){flag = 1;}
else
flag = 0;
}
}
if(Buttons.BTN3 ==1){
if (matrix[1][0] =='X' | matrix[1][0] == 'O')
{ if(flag==0){flag = 0;}
else
flag = 1;
}else {
store();
DisplayLEDs();
if(flag ==0){flag = 1;}
else
flag = 0;
}
}
if(Buttons.BTN4 ==1){
if (matrix[1][1] =='X' | matrix[1][1] == 'O')
{ if(flag==0){flag = 0;}
else
flag = 1;
}else {
store();
DisplayLEDs();
if(flag ==0){flag = 1;}
else
flag = 0;
}
}
if(Buttons.BTN5 ==1){
if (matrix[1][2] =='X' | matrix[1][2] == 'O')
{ if(flag==0){flag = 0;}
else
flag = 1;
}else {
store();
DisplayLEDs();
if(flag ==0){flag = 1;}
else
flag = 0;
}
}
if(Buttons.BTN6 ==1){
if (matrix[2][0] =='X' | matrix[2][0] == 'O')
{ if(flag==0){flag = 0;}
else
flag = 1;
}else {
store();
DisplayLEDs();
if(flag ==0){flag = 1;}
else
flag = 0;
}
}
if(Buttons.BTN7 ==1){
if (matrix[2][1] =='X' | matrix[2][1] == 'O')
{ if(flag==0){flag = 0;}
else
flag = 1;
}else {
store();
DisplayLEDs();
if(flag ==0){flag = 1;}
else
flag = 0;
}
}
if(Buttons.BTN8 ==1){
if (matrix[2][2] =='X' | matrix[2][2] == 'O')
{ if(flag==0){flag = 0;}
else
flag = 1;
}else {
store();
DisplayLEDs();
if(flag ==0){flag = 1;}
else
flag = 0;
}
}
}

# 489
void GetReading(void){
bigval = TMR1L + (unsigned int)(TMR1H << 8);
bigval = bigval * 16;
reading[index] = bigval;
smallavg = average[index] / 16;
threshold4 = average[index] >> 2;
threshold = threshold4;
if (bigval < average[index] - threshold)
{
switch (index)
{
case 0: Buttons.BTN0 = 1; break;
case 1: Buttons.BTN1 = 1; break;
case 2: Buttons.BTN2 = 1; break;
case 3: Buttons.BTN3 = 1; break;
case 4: Buttons.BTN4 = 1; break;
case 5: Buttons.BTN5 = 1; break;
case 6: Buttons.BTN6 = 1; break;
case 7: Buttons.BTN7 = 1; break;
case 8: Buttons.BTN8 = 1; break;

default: break;
}
}
else
{

switch (index)
{
case 0: Buttons.BTN0 = 0; break;
case 1: Buttons.BTN1 = 0; break;
case 2: Buttons.BTN2 = 0; break;
case 3: Buttons.BTN3 = 0; break;
case 4: Buttons.BTN4 = 0; break;
case 5: Buttons.BTN5 = 0; break;
case 6: Buttons.BTN6 = 0; break;
case 7: Buttons.BTN7 = 0; break;
case 8: Buttons.BTN8 = 0; break;

default: break;
}


average[index] += bigval/16 - smallavg;
}
SetNextChannel();
RestartTimer1();
}

# 544
void RestartTimer1(void)
{
TMR1L = 0;
TMR1H = 0;
TMR2 = 0;
TMR2IF = 0;
TMR1ON = 1;
TMR2ON = 1;
}

# 560
void SetNextChannel(void)
{
if (++index>= 9)
index = 0;
else;
if(index==0)
CPSCON1 = 0b00001000;
if(index==1)
CPSCON1 = 0b00001001;
if(index==2)
CPSCON1 = 0b00001010;
if(index == 3)
CPSCON1 = 0b00001011;
if(index== 4)
CPSCON1 = 0b00001100;
if(index == 5)
CPSCON1 = 0b00001101;
if(index ==6)
CPSCON1 = 0b00001110;
if (index ==7)
CPSCON1 = 0b00001111;
if (index == 8)
CPSCON1 = 0b00000110;
}

# 591
void DisplayLEDs(void)
{
RC5 = 1; RC6 =1; RC7 =1;
RA6 = RA7 = RA0 = 0;


for(int k = 0; k< 3 ; k++)
{
led_display1(result1[0]);led_display2(result1[1]);led_display3(result1[2]);
if(matrix[0][k] == 'O' & matrix[1][k] == 'O' & matrix[2][k] == 'O'){result1[k] = 0b01001001;}
else if(matrix[0][k] == 'O' & matrix[1][k] == 'O' & matrix[2][k] == ' '){result1[k] = 0b01001000;}
else if(matrix[0][k] == 'O' & matrix[1][k] == ' ' & matrix[2][k] == 'O'){result1[k] = 0b01000001;}
else if(matrix[0][k] == 'O' & matrix[1][k] == ' ' & matrix[2][k] == ' '){result1[k] = 0b01000000;}
else if(matrix[0][k] == ' ' & matrix[1][k] == 'O' & matrix[2][k] == 'O'){result1[k] = 0b00001001;}
else if(matrix[0][k] == ' ' & matrix[1][k] == 'O' & matrix[2][k] == ' '){result1[k] = 0b00001000;}
else if(matrix[0][k] == ' ' & matrix[1][k] == ' ' & matrix[2][k] == 'O'){result1[k] = 0b00000001;}

else if(matrix[0][k] == 'O' & matrix[1][k] == 'O' & matrix[2][k] == 'X'){result1[k] = 0b01001010;}
else if(matrix[0][k] == 'O' & matrix[1][k] == 'O' & matrix[2][k] == ' '){result1[k] = 0b01001000;}
else if(matrix[0][k] == 'O' & matrix[1][k] == ' ' & matrix[2][k] == 'X'){result1[k] = 0b01000010;}
else if(matrix[0][k] == 'O' & matrix[1][k] == ' ' & matrix[2][k] == ' '){result1[k] = 0b01000000;}
else if(matrix[0][k] == ' ' & matrix[1][k] == 'O' & matrix[2][k] == 'X'){result1[k] = 0b00001010;}
else if(matrix[0][k] == ' ' & matrix[1][k] == 'O' & matrix[2][k] == ' '){result1[k] = 0b00001000;}
else if(matrix[0][k] == ' ' & matrix[1][k] == ' ' & matrix[2][k] == 'X'){result1[k] = 0b00000010;}

else if(matrix[0][k] == 'O' & matrix[1][k] == 'X' & matrix[2][k] == 'O'){result1[k] = 0b01010001;}
else if(matrix[0][k] == 'O' & matrix[1][k] == 'X' & matrix[2][k] == ' '){result1[k] = 0b01010000;}
else if(matrix[0][k] == 'O' & matrix[1][k] == ' ' & matrix[2][k] == 'O'){result1[k] = 0b01000001;}
else if(matrix[0][k] == 'O' & matrix[1][k] == ' ' & matrix[2][k] == ' '){result1[k] = 0b01000000;}
else if(matrix[0][k] == ' ' & matrix[1][k] == 'X' & matrix[2][k] == 'O'){result1[k] = 0b00010001;}
else if(matrix[0][k] == ' ' & matrix[1][k] == 'X' & matrix[2][k] == ' '){result1[k] = 0b00010000;}
else if(matrix[0][k] == ' ' & matrix[1][k] == ' ' & matrix[2][k] == 'O'){result1[k] = 0b00000001;}

else if(matrix[0][k] == 'O' & matrix[1][k] == 'X' & matrix[2][k] == 'X'){result1[k] = 0b01010010;}
else if(matrix[0][k] == 'O' & matrix[1][k] == 'X' & matrix[2][k] == ' '){result1[k] = 0b01010000;}
else if(matrix[0][k] == 'O' & matrix[1][k] == ' ' & matrix[2][k] == 'X'){result1[k] = 0b01000010;}
else if(matrix[0][k] == 'O' & matrix[1][k] == ' ' & matrix[2][k] == ' '){result1[k] = 0b01000000;}
else if(matrix[0][k] == ' ' & matrix[1][k] == 'X' & matrix[2][k] == 'X'){result1[k] = 0b00010010;}
else if(matrix[0][k] == ' ' & matrix[1][k] == 'X' & matrix[2][k] == ' '){result1[k] = 0b00010000;}
else if(matrix[0][k] == ' ' & matrix[1][k] == ' ' & matrix[2][k] == 'X'){result1[k] = 0b00000010;}

else if(matrix[0][k] == 'X' & matrix[1][k] == 'O' & matrix[2][k] == 'O'){result1[k] = 0b10001001;}
else if(matrix[0][k] == 'X' & matrix[1][k] == 'O' & matrix[2][k] == ' '){result1[k] = 0b10001000;}
else if(matrix[0][k] == 'X' & matrix[1][k] == ' ' & matrix[2][k] == 'O'){result1[k] = 0b10000001;}
else if(matrix[0][k] == 'X' & matrix[1][k] == ' ' & matrix[2][k] == ' '){result1[k] = 0b10000000;}
else if(matrix[0][k] == ' ' & matrix[1][k] == 'O' & matrix[2][k] == 'O'){result1[k] = 0b00001001;}
else if(matrix[0][k] == ' ' & matrix[1][k] == 'O' & matrix[2][k] == ' '){result1[k] = 0b00001000;}
else if(matrix[0][k] == ' ' & matrix[1][k] == ' ' & matrix[2][k] == 'O'){result1[k] = 0b00000001;}

else if(matrix[0][k] == 'X' & matrix[1][k] == 'O' & matrix[2][k] == 'X'){result1[k] = 0b10001010;}
else if(matrix[0][k] == 'X' & matrix[1][k] == 'O' & matrix[2][k] == ' '){result1[k] = 0b10001000;}
else if(matrix[0][k] == 'X' & matrix[1][k] == ' ' & matrix[2][k] == 'X'){result1[k] = 0b10000010;}
else if(matrix[0][k] == 'X' & matrix[1][k] == ' ' & matrix[2][k] == ' '){result1[k] = 0b10000000;}
else if(matrix[0][k] == ' ' & matrix[1][k] == 'O' & matrix[2][k] == 'X'){result1[k] = 0b00001010;}
else if(matrix[0][k] == ' ' & matrix[1][k] == 'O' & matrix[2][k] == ' '){result1[k] = 0b00001000;}
else if(matrix[0][k] == ' ' & matrix[1][k] == ' ' & matrix[2][k] == 'X'){result1[k] = 0b00000010;}

else if(matrix[0][k] == 'X' & matrix[1][k] == 'X' & matrix[2][k] == 'O'){result1[k] = 0b10010001;}
else if(matrix[0][k] == 'X' & matrix[1][k] == 'X' & matrix[2][k] == ' '){result1[k] = 0b10010000;}
else if(matrix[0][k] == 'X' & matrix[1][k] == ' ' & matrix[2][k] == 'O'){result1[k] = 0b10000001;}
else if(matrix[0][k] == 'X' & matrix[1][k] == ' ' & matrix[2][k] == ' '){result1[k] = 0b10000000;}
else if(matrix[0][k] == ' ' & matrix[1][k] == 'X' & matrix[2][k] == 'O'){result1[k] = 0b00010001;}
else if(matrix[0][k] == ' ' & matrix[1][k] == 'X' & matrix[2][k] == ' '){result1[k] = 0b00010000;}
else if(matrix[0][k] == ' ' & matrix[1][k] == ' ' & matrix[2][k] == 'O'){result1[k] = 0b00000001;}

else if(matrix[0][k] == 'X' & matrix[1][k] == 'X' & matrix[2][k] == 'X'){result1[k] = 0b10010010;}
else if(matrix[0][k] == 'X' & matrix[1][k] == 'X' & matrix[2][k] == ' '){result1[k] = 0b10010000;}
else if(matrix[0][k] == 'X' & matrix[1][k] == ' ' & matrix[2][k] == 'X'){result1[k] = 0b10000010;}
else if(matrix[0][k] == 'X' & matrix[1][k] == ' ' & matrix[2][k] == ' '){result1[k] = 0b10000000;}
else if(matrix[0][k] == ' ' & matrix[1][k] == 'X' & matrix[2][k] == 'X'){result1[k] = 0b00010010;}
else if(matrix[0][k] == ' ' & matrix[1][k] == 'X' & matrix[2][k] == ' '){result1[k] = 0b00010000;}
else if(matrix[0][k] == ' ' & matrix[1][k] == ' ' & matrix[2][k] == 'X'){result1[k] = 0b00000010;}

led_display1(result1[0]);led_display2(result1[1]);led_display3(result1[2]);
}
}

# 672
void led_display1(unsigned char value1)
{
if((value1&0b00000001)==1) RC1=1;
else RC1=0;
RC3=1;
RC3=0;

if(((value1&0b00000010)>>1)==1) RC1=1;
else RC1=0;
RC3=1;
RC3=0;

if(((value1&0b00000100)>>2)==1) RC1=1;
else RC1=0;
RC3=1;
RC3=0;

if(((value1&0b00001000)>>3)==1) RC1=1;
else RC1=0;
RC3=1;
RC3=0;

if(((value1&0b00010000)>>4)==1) RC1=1;
else RC1=0;
RC3=1;
RC3=0;

if(((value1&0b00100000)>>5)==1) RC1=1;
else RC1=0;
RC3=1;
RC3=0;

if(((value1&0b01000000)>>6)==1) RC1=1;
else RC1=0;
RC3=1;
RC3=0;

if(((value1&0b10000000)>>7)==1) RC1=1;
else RC1=0;
RC3=1;
RC3=0;

RC4=1;
RC4=0;
}

# 722
void led_display2(unsigned char value2)
{
if((value2&0b00000001)==1) RA5=1;
else RA5=0;
RC0=1;
RC0=0;

if(((value2&0b00000010)>>1)==1) RA5=1;
else RA5=0;
RC0=1;
RC0=0;

if(((value2&0b00000100)>>2)==1) RA5=1;
else RA5=0;
RC0=1;
RC0=0;

if(((value2&0b00001000)>>3)==1) RA5=1;
else RA5=0;
RC0=1;
RC0=0;

if(((value2&0b00010000)>>4)==1) RA5=1;
else RA5=0;
RC0=1;
RC0=0;

if(((value2&0b00100000)>>5)==1) RA5=1;
else RA5=0;
RC0=1;
RC0=0;

if(((value2&0b01000000)>>6)==1) RA5=1;
else RA5=0;
RC0=1;
RC0=0;

if(((value2&0b10000000)>>7)==1) RA5=1;
else RA5=0;
RC0=1;
RC0=0;

RE2=1;
RE2=0;
}

# 772
void led_display3(unsigned char value3)
{
if((value3&0b00000001)==1) RA1=1;
else RA1=0;
RA3=1;
RA3=0;

if(((value3&0b00000010)>>1)==1) RA1=1;
else RA1=0;
RA3=1;
RA3=0;

if(((value3&0b00000100)>>2)==1) RA1=1;
else RA1=0;
RA3=1;
RA3=0;

if(((value3&0b00001000)>>3)==1) RA1=1;
else RA1=0;
RA3=1;
RA3=0;

if(((value3&0b00010000)>>4)==1) RA1=1;
else RA1=0;
RA3=1;
RA3=0;

if(((value3&0b00100000)>>5)==1) RA1=1;
else RA1=0;
RA3=1;
RA3=0;

if(((value3&0b01000000)>>6)==1) RA1=1;
else RA1=0;
RA3=1;
RA3=0;

if(((value3&0b10000000)>>7)==1) RA1=1;
else RA1=0;
RA3=1;
RA3=0;

RA2=1;
RA2=0;
}

# 822
void delay(unsigned long data)
{
for( ;data>0;data-=1);
}

# 831
void send_config(unsigned char data)
{
RE0=0;
PORTB=data;
delay(50);
e_pulse();
}

# 843
void send_char(unsigned char data)
{
RE0=1;
PORTB=data;
delay(50);
e_pulse();
}

# 855
void e_pulse(void)
{
RE1=1;
delay(50);
RE1=0;
delay(50);
}

# 867
void lcd_goto(unsigned char data)
{
if(data<16)
{
send_config(0x80+data);
}
else
{
data=data-20;
send_config(0xc0+data);
}
}

# 884
void lcd_shift(void)
{
send_config(0x18);
delay(6000);
}

# 894
void lcd_clr(void)
{
send_config(0x01);
delay(50);
}

# 904
void send_string(const char *s)
{

while (s && *s)send_char (*s++);

}

# 915
void draw(void){

RC5 = RC6 = RC7 = 1;
result = 0b00100100;
RA6 = RA7 = RA0 = 1;
led_display1(result);
led_display2(result);
led_display3(result);
delay(3500);
led_off();
delay(3500);
}

# 932
void led_off(void)
{
result = 0b00000000;
RA6 = RA7 = RA0 = 0;
RC5 = RC6 = RC7 = 0;
led_display1(result);
led_display2(result);
led_display3(result);
}

# 946
void PIEZO(void)
{
GIE=0;
TMR2ON = 0;
TMR1ON = 0;

CCP1CON = 0b00001100;
T2CON = 0b00000111;
PR2 = 0x76;
CCPR1L = 50;
delay(4000);
PR2 = 0x7D;
CCPR1L = 50;
delay(4000);
PR2 = 0x9E;
CCPR1L = 50;
delay(4000);
PR2 = 0x76;
CCPR1L = 100;
delay(8000);
PR2 = 0x7D;
CCPR1L = 100;
delay(8000);
PR2 = 0xBD;
CCPR1L = 50;
delay(4000);
PR2 = 0x00;
CCPR1L = 50;
delay(2000);
PR2 = 0x76;
CCPR1L = 50;
delay(4000);
PR2 = 0xEE;
CCPR1L = 50;
delay(4000);
PR2 = 0x9E;
CCPR1L = 50;
delay(4000);
PR2 = 0x8D;
CCPR1L = 50;
delay(8000);
PR2 = 0x76;
CCPR1L = 50;
delay(8000);

CCP1CON = 0x00;
T2CON=0b01110110;
PR2 = 0xB4;
CCPR1L = 0;

TMR2IF = 0;
TMR2IE = 1;
T1CON = 0b11000101;
T1GCON = 0b11100010;
TMR1GIF = 0;
TMR1GIE = 1;

RestartTimer1();
GIE = 1;
}

# 1011
void PIEZO_D(void)
{
GIE=0;
TMR2ON = 0;
TMR1ON = 0;
CCP1CON = 0b00001100;
T2CON = 0b00000111;
PR2 = 0xBC;
CCPR1L = 50;
delay(4000);
PR2 = 0xBC;
CCPR1L = 50;
delay(4000);
PR2 = 0xB2;
CCPR1L = 50;
delay(4000);
PR2 = 0x9E;
CCPR1L = 100;
delay(4000);
PR2 = 0x9E;
CCPR1L = 100;
delay(4000);
PR2 = 0xB2;
CCPR1L = 50;
delay(4000);
PR2 = 0xBC;
CCPR1L = 50;
delay(4000);
PR2 = 0xD3;
CCPR1L = 50;
delay(4000);
PR2 = 0xEE;
CCPR1L = 50;
delay(4000);
PR2 = 0xEE;
CCPR1L = 50;
delay(4000);
PR2 = 0xD3;
CCPR1L = 50;
delay(4000);
PR2 = 0xBC;
CCPR1L = 50;
delay(4000);
PR2 = 0xBC;
CCPR1L = 50;
delay(4000);
PR2 = 0xD3;
CCPR1L = 50;
delay(2000);
PR2 = 0xD3;
CCPR1L = 50;
delay(8000);
PR2 = 0xBC;
CCPR1L = 50;
delay(4000);
PR2 = 0xBC;
CCPR1L = 50;
delay(4000);
PR2 = 0xB2;
CCPR1L = 50;
delay(4000);
PR2 = 0x9E;
CCPR1L = 50;
delay(4000);
PR2 = 0x9E;
CCPR1L = 50;
delay(4000);
PR2 = 0xB2;
CCPR1L = 50;
delay(4000);
PR2 = 0xBC;
CCPR1L = 50;
delay(4000);
PR2 = 0xD3;
CCPR1L = 50;
delay(4000);
PR2 = 0xEE;
CCPR1L = 50;
delay(4000);
PR2 = 0xEE;
CCPR1L = 50;
delay(4000);
PR2 = 0xD3;
CCPR1L = 50;
delay(4000);
PR2 = 0xBC;
CCPR1L = 50;
delay(4000);
PR2 = 0xD3;
CCPR1L = 50;
delay(4000);
PR2 = 0xEE;
CCPR1L = 50;
delay(2000);
PR2 = 0xEE;
CCPR1L = 50;
delay(8000);

CCP1CON = 0x00;
T2CON=0b01110110;
PR2 = 0xB4;
CCPR1L = 0;

TMR2IF = 0;
TMR2IE = 1;
T1CON = 0b11000101;
T1GCON = 0b11100010;
TMR1GIF = 0;
TMR1GIE = 1;

RestartTimer1();
GIE = 1;
}

# 1129
void PIEZO_S(void)
{
GIE=0;
TMR2ON = 0;
TMR1ON = 0;

CCP1CON = 0b00001100;
T2CON = 0b00000111;

PR2 = 0xEE;
CCPR1L = 50;
delay(2000);
PR2 = 0xD3;
CCPR1L = 50;
delay(2000);
PR2 = 0xBD;
CCPR1L = 100;
delay(2000);
PR2 = 0xB2;
CCPR1L = 100;
delay(2000);
PR2 = 0x9E;
CCPR1L = 50;
delay(2000);
PR2 = 0x8D;
CCPR1L = 50;
delay(2000);
PR2 = 0x7D;
CCPR1L = 50;
delay(2000);
PR2 = 0x76;
CCPR1L = 50;
delay(4000);


CCP1CON = 0x00;
T2CON=0b01110110;
PR2 = 0xB4;
CCPR1L = 0;

TMR2IF = 0;
TMR2IE = 1;
T1CON = 0b11000101;
T1GCON = 0b11100010;
TMR1GIF = 0;
TMR1GIE = 1;

RestartTimer1();
GIE = 1;
}

# 1184
char winlose(void)
{
int status;
int i,j;
status =0;
char flag_w;
for(int i=0; i<3; i++)
{

if((matrix[i][0]== matrix[i][1]) & (matrix[i][0] == matrix[i][2])){
return matrix[i][0];
}

if(matrix[0][i] == matrix[1][i] & matrix[0][i] == matrix[2][i]){
return matrix[0][i];
}

if(matrix[0][0] == matrix[1][1] & matrix[0][0] == matrix[2][2]){
return matrix[0][0];
}
if(matrix[0][2] == matrix[1][1] & matrix[0][2] == matrix[2][0]){
return matrix[0][2];
}


}
for(int i=0; i<3; i++){
for(int j=0; j<3; j++){
if(matrix[i][j] == ' '){
status++;
}else{
status = status;
}
}
}
if(status == 0){
flag_w = 'd';
return flag_w;
}else{
flag_w = ' ';
return flag_w;
}
}
